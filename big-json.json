[{"filename": "api-images.docx", "content": "טל: 0547299834\n\n\n\nמה נעשה היום:\n\n\n\nפתרון מטלה\n\nשיפור מטלה – סינון עם JS\n\nהמשך API של משחק ניחושים\n\nבשיעורים הבאים עד הפרוייקט – פרוייקט אנשי קשר עם SPA\n\n\n\nפתרון מטלה:\n\n\n\nSPA קובץ HTML שמכיל את הקישורים ל JS ו DIV ראשי אחד.\n\nיצרנו פונקציה שמורידה את ה JSON מה API עם axios  ועוברת על כל הטיסות\n\nעבור כל טיסה, קוראים לפונקציה נוספת שיוצרת את ה divs שצריך כדי לרנדר את הטבלה\n\n\n\nהמשך API של משחק הניחושים:\n\n\n\nביצוע בקשה עם POST:\n\naxios.post(\"http://127.0.0.1:5000/api/guess\", {\"number\":e.target.value})\n\nבצד שרת טיפלנו בבקשת POST וחילצנו את ה JSON דרך request.json\n\n\n\nתרגיל כיתה (עד 19:50): \n\nפול סטאק (להוסיף מה שצריך ב JS וגם ב API)\n\nPOST /api/guess/range\n\n{\"high\":XXX, \"low\":YYY}\n\nלדוגמא, אם מעבירים:\n\n{\"high\":20, \"low\":5}\n\nאז המספר האקראי ייבחר בין 5 ל 20\n\n\n\nאיך בודקים שה API תקין?\n\nאפשר ידנית עם requests\n\nהבדיקה מקבלת שני מספרים (טווח) ובודקת שהמספר שחוזר הוא בטווח.\n\nתרגיל כיתה:\n\n\n\nכתבו בדיקה עבור /api/guess"}, {"filename": "api-summary-images.docx", "content": "הסבר על ModelForm\n\nModel\n\nאיך מסנכרנים? אם המודל משתנה, מה קורה אם כל הקוד שתלוי במודל?\n\nתלוי: dependency \n\nלדוגמא מודל:\n\nיוזר:\n\nשם \n\nסיסמא\n\nמייל (נוסף)\n\nאם אני רוצה HTML FORM שמוסיף יוזר:\n\nשם \n\nסיסמא\n\nצריך להוסיף Input   מייל לטופס\n\nיצרתי תלות dependency בין ה form ל model של יוזר.\n\nכל פעם שהמודל משתנה צריך לשנות גם את הטופס.\n\nלמשל מוסיפים מייל למודל ואז צריך לשנות גם את הטופס.\n\nמה הפתרון של Django?\n\nMODELFORM\n\nבאופן אוטומטי כשהמודל משתנה גם הטופס משתנה.\n\n\n\nמה נעשה היום?\n\n\n\nארכיטקטורה\n\nAPI\n\nשימוש ב API\n\n\n\n\n\n\nארכיטקטורה\n\n\n\nClient Server\n\n\n\nModel View Controller (MVC)\t\n\nModel Template View (MTV)\n\nSPA\n\nSingle Page Application \n\n\n\n\n\nדוגמא:\n\nאפליקציה שמציגה מחירי ביטקוין מעודכנים בזמן אמיתי.\n\nצריך את ה data, מחירי המטבע\n\nשם אותם ב database, model\n\nViews\n\nTemplates\n\nבמקום להכניס ידנית את הנתונים, למה לא למשוך אותם מאיזשהו שרות (שרת) אחר?\n\nשרות כזה נקרא API\n\nנניח שאני רוצה לקחת את המחיר מ https://www.coindesk.com/price/bitcoin/\n\nשינוי הקונספט החשוב: עכשיו האפליקציה היא גם CLIENT\n\nאיך עושים client  ב python?\n\nספריית requests\n\nמבצעת בקשות GET POST ונותנת גישה לתוכן ה HTML\n\nכדי להקל על web scraping, כלומר לפרסר (לפרק את התוכן לפי מבנה מסויים) את ה HTML, יש ספרייה נוספת:\n\nBeautifulsoup4\n\nאנחנו רוצים דרך סטנדרטית ומסודרת לגשת לנתונים: API \n\nAPI\n\n\n\nApplication Programming Interface\n\nAPI זה ממשק של פרסום נתונים שבנוי על client server.\n\nה API יודע לקבל בקשות ולהחזיר תשובות בפורמט אחיד שקל לחלץ ממנו את הנתונים.\n\nהפורמט הזה נקרא JSON.\n\nדוגמא:\n\nאותו אתר של מחירי ביטקוין coindesk מפרסם את המחירים דרך API.\n\nכדי להגיע ל API צריך פשוט URL:\n\nhttps://api.coindesk.com/v1/bpi/currentprice.json\n\nצריכת ה API:\n\nהתחברות כ client ושימוש בנתונים\n\nתרגיל כיתה:  חילצנו את ה rate  מה JSON שה API נותן.\n\n\n\nתרגיל full stack (ב flask  או Django) עד 20:00:\n\nאפליקציה ש:\n\nלוקחת נתוני מחיר ביטקוין בדולר מה API הנ\"ל\n\nמציגה אותם למשתמש בדף הראשי\n\nכל בקשה לאפליקציה מציגה את המחירים שנוספו מאז הבקשה הראשונה:\n\n\n\nבקשה ראשונה:\n\n44443.989 24 'Dec 24, 2023 17:27:00 UTC'\n\n\tבקשה שנייה:\n\n44443.989 24 'Dec 24, 2023 17:27:00 UTC'\n\n44442.989 24 'Dec 24, 2023 17:49:00 UTC'\n\n\n\nשלב מתקדם: אפשר לשמור את הנתונים ב DB\n\n\n\n\n\nפרסום API\n\nלפרסם את הנתונים שלנו כ JSON\n\n\n\nתרגיל בית:\n\nבנו אפליקציה שמציגה את לוח הטיסות כטבלה מתוך הנתונים ב API:\n\nhttps://data.gov.il/api/3/action/datastore_search?resource_id=e83f763b-b7d7-479e-b172-ae981ddc6de5&limit=10"}, {"filename": "api.docx", "content": "עליכם לכתוב תוכנית שמציגה בדפדפן לוח טיסות המראות ונחיתות מעודכן\n\nhttps://data.gov.il/api/3/action/datastore_search?resource_id=e83f763b-b7d7-479e-b172-ae981ddc6de5&limit=15\n\n.\n\nשלב פייתון, SQL ו HTML\n\n יש להוריד את לוח הטיסות דרך API כפי שלמדנו, כל 15 דקות (אפשר להשתמש ב time.sleep)\n\nלשמור את הטיסות ב database עם SQL\n\nלהציג את הטיסות ב HTML\n\nלהציג שעת \\ תאריך עדכון אחרונה\n\nשלב Javascript\n\nהאם ניתן לרפרש את הדף דרך JS? רמז: הפונקציה location.reload(). אם כן רפרשו את הדף כל 5 דקות דרך JS והציגו את שעת הריפרש האחרון\n\nשנו אוטומטית את הצבע של שורה עם טיסה מבוטלת לאדום (או צבע אחר)\n\nהוסיפו חיפוש (נניח לפי שם חברה) בטבלה דרך JS. את ה HTML של תיבת החיפוש יש להוסיף רק ב JS (document.createElement)\n\nכדי לעשות include לקובץ javascript מתוך HTML:\n\n<script src='flights.js'></script>"}, {"filename": "architecture-summary-images.docx", "content": "איפה אנחנו?\n\n\n\nFrontend\n\nHTML, CSS, JS\n\nרצים בתוך הדפדפן\n\n\n\nשאלה: איך הם מגיעים בכלל לדפדפן?\n\n\n\nתשובה: מה backend!\n\n\n\nמה זה backend?\n\n\n\nיש הרבה סוגים של backend\n\n\n\nשרת ווב (סטטי)\n\nבעצם כמו שרת קבצים. הדפדפן מבקש מהשרת את ה URL, ב URL יש את שם הקובץ.\n\nהשרת מסתכל בתיקיית ה HTML שלו (!) ואם הקובץ שם הוא מחזיר אותו לדפדפן.\n\nURL\n\nhttp://127.0.0.1:3000/index.html\n\n\thttp: הפרוטוקול\n\n\t127.0.0.1: כתובת IP מיוחדת של המחשב המקומי (שלי). נועד לבדיקות, יש שם שצמוד לכל IP, במקרה הזה localhost.\n\n\t3000: פורט, כמו כתובת נוספת שמאפשרת להריץ כמה שרתים בו זמנית אותו IP.\n\n\tהפורט הסטנדרטי של http הוא 80  או 443 במקרה של https\n\n\t(לנו הפורט רלוונטי בעיקר לבדיקות)\n\n\tמאחורי הקלעים: פרוטוקול TCP/IP\n\n\tשרתי ווב (או שרתי http) נפוצים:\n\n\tNginx\n\n\tApache\n\n\tIIS\n\n\tExpress\n\n\tבדרך כלל רצים בסביבת linux. חוץ מ IIS.\n\n\n\nבשביל לראות מה קורה בין הדפדפן לשרת, נכנסים ל developer tools, network \n\n\n\nתרגילון:\n\nב VSCODE, הוסיפו מה שצריך כדי לקשר ל JS ו CSS\n\nהעתיקו את הקובץ המעודכן לתיקית html של nginx (לדרוס את הקובץ הקודם)\n\nרפרשו את הדף בכתובת localhost בזמן שאתם עוקבים ב developer tools\n\nאם לא עובד localhost תנסו 127.0.0.1\n\nאמורים לראות:\n\nIndex.html\n\nStyle.css\n\nIndex.js\n\nדיאגרמת ארכיטקטורה\n\nארכיטקטורה: הרכיבים השונים והקשרים בינהם\n\nרכיב (במבט על): דפדפן, שרת, אפשר גם HTML, JS\n\nזה מאד מופשט לכן צריך ציור (דיאגרמה)\n\n\n\nHTTP\n\nזה פרוטוקול תקשורת בין לקוח (דפדפן) ושרת (nginx)\n\nהתקשורת מתבצעת ע\"י בקשות ותשובות\n\nHTTP Request\n\nHTTP Response\n\n\n\nHTTP REQUEST / RESPONSE\n\nמה יש בו?\n\nURL, למשל /js/index.js, הנתיב לקובץ או למשאב resource\n\nHTTP Method, יש הרבה, רק כמה נפוצים\n\nHeaders\n\nBODY (אם שולחים נתונים לשרת)\t\n\nב response יש מבנה דומה, כולל את התוכן שביקשנו ב REQUEST\n\n\n\nHTTP METHODS\n\nאפשר לבקש מהשרת בקשות עם מתודות שונות.\n\nGET: כשרוצים לקבל או להוריד משהו מהשרת\n\nPOST: כשרוצים להעלות משהו לשרת\n\nDELETE: למחוק משהו\n\nPUT: לעדכן משהו\n\nיש עוד... https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods\n\nמה עוד יש ב backend?\n\nData\n\nמידע שמור ב database\n\n\n\nAPI\n\nApplication Programming Interface\n\nסדרה של URLS (routes) שנותנת לקליינט (frontend) גישה ל DATABASE.\n\nלמשל:\n\n/students\n\n/courses\n\n/courses/python\n\n/courses/add\n\n\n\nDATABASE\n\nיש שני סוגים עיקריים של DB\n\nSQL\n\nnoSQL\n\nSQL: המידע נשמר בטבלאות, ואנחנו (המתכנתים) מתשאלים (query) את ה DB בעזרת שפת SQL.\n\nStructured Query Language SQL\n\nכלומר צריך לדעת SQL כדי לתשאל את ה DB. נשתמש בפייתון כדי להתחבר ל DB ולכתוב SQL.\n\nORM: ממשק לתשאל DB ע\"י קוד בפייתון (או שפת תכנות אחרת) בלי SQL, שמייצר עבורנו את ה SQL אוטומטית.\n\nיש 4 פעולות ב DB שחייבים לדעת (CRUD):\n\nCREATE\n\nREAD\n\nUPDATE\n\nDELETE\n\nהדגמה\n\nלהתחבר ל DB\n\nנתחבר ל DB שנקרא SQLITE\n\nיש עוד הרבה, \n\nMySQL\n\nOracle\n\nSQL Server\n\nניצור טבלה לשמירה של בלוגים, נקרא לה blogs\n\nנשמור שם שני פוסטים (אפשר גם 1000 או יותר)\n\nנקרא את הפוסטים מהטבלה.\n\nסיכום SQL:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeb Server\n\nתיקיות עם \n\n\n\nWeb Server\n\nתיקיות עם \n\n\n\nBack End\n\nBack End\n\nFront End\n\nFront End\n\n\n\nBrowser\n\nBrowser \n\n\n\nHTML\n\nHTML\n\nCSS\n\nCSS\n\nJS\n\nJS\n\nJS\n\nJS\n\nCSS\n\nCSS\n\nHTML\n\nHTML\n\nFront End\n\nFront End"}, {"filename": "backend-summary-images.docx", "content": "Backend\n\n\n\nאיפה אנחנו?\n\n\n\nFrontend\n\nHTML, CSS, JS\n\nרצים בתוך הדפדפן\n\n\n\nשאלה: איך הם מגיעים בכלל לדפדפן?\n\n\n\nתשובה: מה backend!\n\n\n\nמה זה backend?\n\n\n\nיש מספר חלקים ל-backend: שרת ווב, API, DB. \n\n\n\nשרת ווב (סטטי)\n\nבעצם כמו שרת קבצים. הדפדפן מבקש מהשרת את ה URL, ב URL יש את שם הקובץ.\n\nהשרת מסתכל בתיקיית ה HTML שלו (!) ואם הקובץ שם הוא מחזיר אותו לדפדפן.\n\nURL\n\nhttp://127.0.0.1:3000/index.html\n\n\thttp: הפרוטוקול\n\n\t127.0.0.1: כתובת IP מיוחדת של המחשב המקומי (שלי). נועד לבדיקות, יש שם \tשצמוד לכל IP, במקרה הזה localhost.\n\n\t3000: פורט, כמו כתובת נוספת שמאפשרת להריץ כמה שרתים בו זמנית אותו IP.\n\n\tהפורט הסטנדרטי של http הוא 80  או 443 במקרה של https\n\n\t(לנו הפורט רלוונטי בעיקר לבדיקות)\n\n\tמאחורי הקלעים: פרוטוקול TCP/IP\n\n\tשרתי ווב (או שרתי http) נפוצים:\n\n\tNginx\n\n\tApache\n\n\tIIS\n\n\tExpress\n\n\tבדרך כלל רצים בסביבת linux. חוץ מ IIS.\n\n\n\nבשביל לראות מה קורה בין הדפדפן לשרת, נכנסים ל developer tools, network \n\n\n\nתרגילון:\n\nב VSCODE, הוסיפו מה שצריך כדי לקשר ל JS ו CSS\n\nהעתיקו את הקובץ המעודכן לתיקית html של nginx (לדרוס את הקובץ הקודם)\n\nרפרשו את הדף בכתובת localhost בזמן שאתם עוקבים ב developer tools\n\nאם לא עובד localhost תנסו 127.0.0.1\n\nאמורים לראות:\n\nIndex.html\n\nStyle.css\n\nIndex.js\n\n\n\nדיאגרמת ארכיטקטורה\n\nארכיטקטורה: הרכיבים השונים והקשרים בינהם\n\nרכיב (במבט על): דפדפן, שרת, אפשר גם HTML, JS\n\nזה מאד מופשט לכן צריך ציור (דיאגרמה)\n\n\n\nHTTP\n\nזה פרוטוקול תקשורת בין לקוח (דפדפן) ושרת (nginx)\n\nהתקשורת מתבצעת ע\"י בקשות ותשובות\n\nHTTP Request\n\nHTTP Response\n\n\n\nHTTP REQUEST / RESPONSE\n\nמה יש בו?\n\nURL, למשל /js/index.js, הנתיב לקובץ או למשאב resource\n\nHTTP Method, יש הרבה, רק כמה נפוצים\n\nHeaders\n\nBODY (אם שולחים נתונים לשרת)\t\n\nב response יש מבנה דומה, כולל את התוכן שביקשנו ב REQUEST\n\n\n\nHTTP METHODS\n\nאפשר לבקש מהשרת בקשות עם מתודות שונות.\n\nGET: כשרוצים לקבל או להוריד משהו מהשרת\n\nPOST: כשרוצים להעלות משהו לשרת\n\nDELETE: למחוק משהו\n\nPUT: לעדכן משהו\n\nיש עוד... https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods\n\nמה עוד יש ב backend?\n\nData\n\nמידע שמור ב database\n\n\n\nAPI\n\nApplication Programming Interface\n\nסדרה של URLS (routes) שנותנת לקליינט (frontend) גישה ל DATABASE.\n\nלמשל:\n\n/students\n\n/courses\n\n/courses/python\n\n/courses/add\n\n\n\nDATABASE\n\nיש שני סוגים עיקריים של DB\n\nSQL\n\nnoSQL\n\nSQL: המידע נשמר בטבלאות, ואנחנו (המתכנתים) מתשאלים (query) את ה DB בעזרת שפת SQL.\n\nStructured Query Language SQL\n\nכלומר צריך לדעת SQL כדי לתשאל את ה DB. נשתמש בפייתון כדי להתחבר ל DB ולכתוב SQL.\n\nORM: ממשק לתשאל DB ע\"י קוד בפייתון (או שפת תכנות אחרת) בלי SQL, שמייצר עבורנו את ה SQL אוטומטית.\n\nיש 4 פעולות ב DB שחייבים לדעת (CRUD):\n\nCREATE\n\nREAD\n\nUPDATE\n\nDELETE\n\nהדגמה\n\nלהתחבר ל DB\n\nנתחבר ל DB שנקרא SQLITE\n\nיש עוד הרבה, \n\nMySQL\n\nOracle\n\nSQL Server\n\nניצור טבלה לשמירה של בלוגים, נקרא לה blogs\n\nנשמור שם שני פוסטים (אפשר גם 1000 או יותר)\n\nנקרא את הפוסטים מהטבלה.\n\nסיכום שאילתות SQL:\n\nCREATE TABLE\n\nINSERT INTO\n\nSELECT FROM\n\n\n\nhttps://www.w3schools.com/sql/sql_create_table.asp\n\nhttps://www.w3schools.com/sql/sql_insert.asp\n\nhttps://www.w3schools.com/sql/sql_select.asp"}, {"filename": "carwash-images.docx", "content": "תרגילי בית\n\n\n\nלשנות את נתוני הבדיקה לאותו יום ושעות שונות (כדי שהמיון יהיה לפי השעה)\n\nדוגמא:\n\n\n\n\n\nלעדכן נתוני בדיקה עבור צבע, עברית, שעה.\n\n\n\nלהציג כל חברת רכב בשורה בצבע שלו.\n\nדוגמא:\n\n\n\nליישר את העמודות עם CSS.\n\nדוגמא:\n\n\n\nהוספו בתחילת העמוד \"תור רחיצה לתאריך XX-XX-XXXX” עם התאריך של היום.\n\n\tדוגמא:\n\n   \n\n\n\n\n\n\n\n6. שנו את פורמט התאריך לישראלי.\n\n    דוגמא:\n\n\n\n\n\n7. השאירו רק את השעה בעמודת התאריך ללא התאריך.\n\n\n\n     דוגמא:\n\n\n\n8. הוסיפו כפתור \"הסר\" לכל הזמנה, כשלוחצים ההזמנה נמחקת מה DB ומהתצוגה.\n\n     דוגמא:\n\n\n\nאחרי הלחיצה על הסר של במוו:\n\n\n\n9. יישרו את הפריטים כך שיהיו ממורכזים יחסית לכפתור.\n\n     דוגמא:\n\n\n\n\n\n10. בונוס: הוסיפו form להוספת הזמנה. השתמשו ב inputs מהסוגים המתאימים עבור צבע ותאריך. השתמשו ב drop down select בשביל חברה וסוגים.\n\nדוגמא:"}, {"filename": "carwash.docx", "content": "תכנית עבודה לפרוייקט הזמנות\n\n\n\nעשינו: ב db.py להמיר את הרשימה של TUPLES לרשימה של מילונים\n\nעשינו: להכניס לטבלה של orders  גם צבע רכב, חברה (מאזדה וכו...)\n\nלהציג את פרטי הלקוח (נניח הטלפון) בתוך רשימת ההזמנות (התור)\n\nעשינו: לעבור לעברית (לעדכן נתוני בדיקה)\n\nלשנות את נתוני הבדיקה שלנו לאותו יום ושעות שונות (כדי שהמיון יהיה לפי השעה)\n\nלעדכן נתוני בדיקה עבור צבע, עברית, שעה\n\nלהציג כל חברת רכב בשורה בצבע שלו\n\nלהוסיף טופס להוספת הזמנה\n\nלעשות drop down select עבור חברה, סוג רחיצה, סוג רכב\n\nלעדכן מחיר לפי תחשיב של הנחה, מספר ביקורים במקום, סוג הרכב"}, {"filename": "contacts.docx", "content": "אפליקציית אנשי קשר\n\n\n\nאפיון\n\nשלב 1:\n\nלהוסיף איש קשר \n\nשם\n\nטלפון\n\nלראות את כל הרשימה\n\nשם, טלפון \n\nלמשוך איש קשר לפי השם (להכניס שם ולקבל טלפון שלו)\n\nמקבלים גם שם וגם טלפון\n\nשלב 2:\n\nחיפוש ברשימה (לפי חלק מהשם)\n\nספר טלפונים ארגוני עם רשימה קבועה מראש (אולי רק אדמין יכול לשנות)\n\n\n\nהרצה לדוגמא:\n\nתפריט:\n\nAdd\n\nView Contacts\n\nGet number \n\n\n\nבוחר 1\n\nEnter name\n\nEnter phone number\n\n\n\nבוחר 2\n\nName\tNumber\n\nTal\t074-212333\n\nMoshe\t076-332334\n\n\n\nבוחר 3\n\nEnter name:\n\nTal\n\n074-212333"}, {"filename": "core-python-images.docx", "content": "תרגילים בטכניקות ליבה\n\n\n\nמשתנים ו datatypes\n\nתנאים ולולאות\n\nאוספים (רשימות, מילונים), מחרוזות (strings)\n\nפונקציות\n\nשימוש בספריות סטנדרטיות וחיצוניות\n\n\n\nתרגיל 1:\n\n\n\nכתבו תוכנית המקבלת מהמשתמש פרטים אישיים ומייצרת מחרוזת (string) עם פרופיל משתמש. הציגו את הפרופיל למשתמש.\n\n\n\nדוגמת הרצה:\n\n\n\n\n\n\n\nפתרון:\n\n\n\n\n\nתרגיל 2:\n\n\n\nבתרגיל 1, הדפיסו את שם המשתמש בפרופיל עם אות גדולה.\n\n\n\nדוגמת הרצה:\n\n\n\n\n\n\n\nפתרון:\n\n\n\nשימוש במתודה capitalize של string:\n\n\n\n\n\nתרגיל 3:\n\n\n\nבתרגיל הקודם, קבלו מהמשתמש רשימה של תחביבים והציגו אותה.\n\n\n\nדוגמת הרצה:\n\n\n\n\n\nפתרון:\n\n\n\n\n\n \n\nתרגיל 4:\n\n\n\nבתרגיל הקודם, הסירו את הרווחים מרשימת התחביבים והציגו את הרשימה ללא רווחים:\n\n\n\n\n\n\n\nפתרון:\n\n\n\nשימוש במתודה replace של string:\n\n\n\n\n\n\n\nתרגיל 5:\n\n\n\nבתרגיל הקודם, הציגו את רשימת התחביבים כתת-רשימה של הפרופיל.\n\n\n\nדוגמת הרצה:\n\n\n\n\n\nפתרון:\n\n\n\n\n\nתרגיל 6:\n\n\n\nשימרו את התחביבים מהתרגיל הקודם ברשימה, והציגו אותה כמו בתרגיל הקודם.\n\n\n\nדוגמת הרצה:\n\n\n\n\n\nפתרון:\n\n\n\nנשתמש במתודה split של string שמחזירה רשימה:\n\n\n\n\n\n\n\nתרגיל \n\n\n\nכתבו פונקציה המקבלת את השם ומחזירה True אם האורך לפחות 2 תווים, אחרת מחזירה False.\n\n\n\nתרגיל \n\n\n\nהוסיפו לפונקציה פרמטרים של אורך מינימלי ומקסימלי בנוסף למחרוזת.\n\nבדקו אם אורך מינימלי 2 ומקסימום 7\n\n\n\n\n\nתרגיל\n\n\n\n\n\nכתבו פונקציה המקבלת גיל ומחזירה True אם הוא בין 7-70, אחרת False.\n\n\n\n\n\nתרגיל 9\n\n\n\nכתבו פונקציה המקבלת שם, גיל ותחביבים ובודקת את כולם לפי הדרישות בתרגילים הקודמים:\n\n\n\nמדפיסה דו\"ח כישלון לכל פרמטר\n\nמחזירה את אלה שהצליחו ברשימה\n\n\n\nדוגמת הרצה:\n\n\n\n\n\nפתרון:\n\n\n\n\n\n\n\n\n\n\n\n תרגיל \n\n\n\n\n\nכתבו פונקציה המקבלת תחביב.\n\n\n\nבודקת האם התחביב הוא string\n\n\n\nאם כן, תחזיר True.\n\n\n\nאם לא, תבקש string עד שתקבל ותחזיר אותו.\n\n\n\n תרגיל \n\n\n\n\n\nכתבו פונקציה המקבלת תחביב וגיל.\n\n\n\nהאם התחביב ברשימת תחביבים קבועה מראש לפי הגיל?\n\n\n\nאם כן, תחזיר True.\n\n\n\nאם לא, תחזיר False.\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\nתרגיל 7:\n\n\n\nכיתבו פונקציה המקבלת רשימת תחביבים ומחזירה מחרוזת עם רשימה עם פסיקים.\n\n\n\nדוגמת הרצה: כמו בתרגיל הקודם\n\n\n\nפתרון:\n\n\n\n\n\nתרגיל 9:\n\n\n\nבמקום לבקש רשימת תחביבים, בקשו  4 תחביבים והוסיפו אחד אחד לרשימה.\n\n\n\nדוגמת הרצה:\n\n\n\n\n\nפתרון:\n\n\n\n\n\n\n\n\n\n\n\nתרגיל 10\n\n\n\nבתרגיל הקודם, קבלו את מספר התחביבים מהמשתמש.\n\n\n\nדוגמת הרצה:\n\n\n\n\n\nפתרון:\n\n\n\n\n\n\n\n\n\nתרגיל\n\n\n\nאם מספר התחביבים גדול מ 6, לקבוע ל 6.\n\n\n\nתרגיל 11\n\n\n\nכשהתוכנית מבקשת את התחביבים, יש להציג את מספר האיטרציה.\n\n\n\nדוגמת הרצה:\n\n\n\n\n\nפתרון:\n\n\n\n\n\n\n\n\n\n\n\n\n\nתרגיל 13\n\n\n\nבקשו מהמשתמש את סדר העדיפות שלו וסדרו את הרשימה כך שהתחביבים יהיו בסדר העדיפות של המשתמש.\n\n\n\nדוגמת הרצה:\n\n\n\n\n\n\n\n\n\nפתרון:\n\n\n\n\n\n\n\nתרגיל 14:\n\n\n\nשפרו את הפונקציה שמפרמטת את רשימת התחביבים כך שתקבל כקלט מהמתכנת (לא מהמשתמש) את הפרמטרים הבאים ותפרמט בהתאם:\n\n1. תווים לשים לפני כל תחביב (למשל – או *)\n\n2. פרמטר בוליאני לקבוע אם יהיה tab או לא\n\n3. פרמטר בוליאני לקבוע עם יהיה מספור או לא\n\n\n\n\n\n\n\nפתרון:\n\n\n\n\n\n\n\nתרגיל 15:\n\n\n\nבקשו את הדירוג לכל תחביב.\n\n\n\nדוגמת הרצה:\n\n\n\n\n\n\n\nפתרון:\n\n\n\nשימו לב שההשמה מתבצעת בעותק של הרשימה:\n\n\n\n\n\n\n\nתרגיל 16:\n\n\n\nכיתבו פונקציות לייצר נתונים פיקטיביים במקום לקבל אותם מהמשתמש:\n\n\n\nפונקציה לייצור שם אקראי\n\nפונקציה לייצור גיל אקראי\n\nפונקציה לייצור תחביב אקראי\n\nפונקציה לייצור רשימת תחביבים אקראיים \n\nפונקציה לייצור רשימת תחביבים אקראיים מסודרת לפי העדפות אקראיות\n\n\n\nהתוכנית צריכה לרוץ רק ע\"י קריאה לפונקציות הנ\"ל, והפונקציות שכתבתם בתרגילים הקודמים.\n\n\n\nדוגמת הרצה:\n\n\n\n\n\nפתרון: \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nתרגיל 17:\n\n\n\nנגדיר שפרופיל הוא מילון עם הנתונים הבאים: שם, גיל ורשימת תחביבים.\n\n\n\nהגדירו פרופיל אחד.\n\n\n\nפתרון:\n\n\n\n\n\n\n\nתרגיל 18:\n\n\n\nשנו את הפונקציה profile כך שתקבל פרופיל (מילון) ותדפיס אותו.\n\n\n\nפתרון:\n\n\n\n\n\n\n\nתרגיל 19:\n\n\n\nכתבו פונקציה המחזירה מספר כלשהו של פרופילים.\n\n\n\nפתרון:\n\n\n\n\n\n\n\nתרגיל 20:\n\n\n\nהשתמשו בפונקציה הנ\"ל לייצר 3 פרופילים ולהדפיס אותם.\n\n\n\nפתרון:\n\n\n\n\n\n\n\nתרגיל 21 (נפרד מהפרופילים)\n\nכתבו מילון שמייצג קלף. לקלף יש מספר בין 1-13, שם, וצורה (spade, heart, diamond, club).\t\n\n\n\nפתרון:\n\n\n\n\n\n\n\nתרגיל:\n\n\n\nאם קלף הוא spade או תלתן, הצבע שלו שחור, אחרת אדום. כתבו פונקציה המקבלת מילון קלף ומגדירה את הצבע.\n\n\n\nפתרון:\n\n\n\n \n\n\n\n\n\nתרגיל 22\n\n\n\nכתבו רשימות עם כל אחד מסוגי הנתונים: צבע מספר וצורה.\n\n\n\nעבור המספרים, האם חייבים לכתוב ידנית את כולם?\n\n\n\n\n\n\n\n\n\nתרגיל 23\n\n\n\nמתוך 13 המספרים, 3 האחרונים נקראים בשם נסיך, מלך, מלכה,  ואס הוא מספר 1. כיתבו מילון המתרגם מספרים אלה לשם המתאים.\n\n\n\nפתרון:\n\n\n\n\n\nתרגיל 24\n\n\n\nהאם אפשר לייצר רשימה של שמות מתוך המילון הנ\"ל?\n\n\n\nפתרון:\n\n\n\n\n\n\n\nתרגיל 25\n\n\n\n\n\nצרו רשימה של המספרים בין 2-10 אבל כמחרוזות, כלומר [\"1\", \"2\"...]\n\n\n\nפתרון:\n\n\n\n\n\n\n\n\n\n\n\n\n\nתרגיל 26\n\n\n\n\n\nצרו מילון הממפה בין המספרים בין  2-10 ובין הרשימה הנ\"ל.\n\n\n\nפתרון:\n\n\n\n\n\n\n\n\n\nתרגיל 27:\n\n\n\nהוסיפו את ה items במילון בתרגיל הקודם למילון של שמות הקלפים.\n\n\n\nפתרון:\n\n\n\n\n\n\n\nתרגיל 28:\n\n\n\nשימו לב שבתרגיל הקודם, האס לא בסדר הנכון. כתבו פונקציה שממייינת את המילון.\n\n\n\nפתרון:\n\n\n\n\n\nתרגיל 29:\n\n\n\n\n\nהאם אפשר ששם המילון המסודר יהיה card_games?\n\n\n\nפתרון: \n\n\n\n\n\nתרגיל 30\n\nהאם nums2nums ו card_games הם אותו מילון, או עותקים נפרדים?\n\n\n\nפתרון:\n\n\n\nנוסיף פריט למילון אחד ונראה שגם המילון השני השתנה, כלומר הם שני שמות שונים לאותו מילון.\n\n\n\nנבדוק שגם ה id שלהם, כלומר הכתובת בזיכרון של המילון, היא אותה כתובת.\n\n\n\n\n\n\n\nתרגיל 31\n\n\n\nצרו פונקציה לייצור קלף קלף עם שם, מספר, צבע וסוג הראשון מתוך המילון והרשימות שבניתם. הפונקציה תקבל שם וסוג ותחזיר מילון עם כל הנתונים.\n\n\n\nפתרון:\n\n\n\n\n\n\n\nתרגיל  32\n\n\n\nצרו קלף עם שם, מספר וסוג הרביעי מתוך המילון והרשימות שבניתם. \n\n\n\n\n\nתרגיל 33:\n\n\n\nצרו קלף עם שם, מספר וסוג אקראי מתוך הפונקציה. \n\n\n\nפתרון:\n\n\n\n\n\n\n\nתרגיל 34\n\n\n\nצרו חפיסת  קלפים, 13 מכל סוג.\n\n\n\n\n\n\n\nתרגיל\n\n\n\nהציגו כל קלף בחבילה כ CSV\n\n\n\n\n\nפתרון:\n\n\n\n\n\n\n\nתרגיל\n\n\n\nכמה סוגים שונים יש בחבילה?\n\n\n\n\n\nכמה צבעים שונים יש בחבילה?\n\n\n\n\n\nהכלילו את הפונקציה לכל פרמטר.\n\n\n\n\n\n\n\nהעבירו רשימה של תכונות וספרו אותם.\n\n\n\n\n\n\n\n\n\n\n\nתרגיל\n\n\n\nכתבו פונקציה \"לערבב\" את החבילה. בדקו.\n\n\n\n\n\nתרגיל 35\n\n\n\nבחרו 2 קלפים באופן אקראי מהרשימה והציגו אותם למשתמש.\n\n\n\nפתרון:\n\n\n\n\n\nתרגיל 36\n\n\n\nבחרו 2 קלפים באופן אקראי והכניסו אותם לשני משתנים.\n\n\n\nפתרון:\n\n\n\n\n\n\n\nתרגיל 37:\n\n\n\nבחרו את שני המספרים של הקלפים האקראיים שבחרתם. הכניסו אותם למשתנים והדפיסו אותם.\n\n\n\nתרגיל 38:\n\n\n\nחשבו את הסכום של שני המספרים הנ\"ל. אם הסכום גדול מ 21 רשמו \"lose\".\n\n\n\nתרגיל 39:\n\n\n\nאחרת, רשמו \"do you want another card?\"\n\n\n\nתרגיל 40:\n\n\n\nשנו את ההדפסה ל input וקבלו קלט. אם כן, בחרו עוד קלף והוסיפו אותו לסכום.\n\n\n\nתרגיל 41:\n\n\n\nהכניסו ללולאה שמתבצעת כמספר הקלפים בחפיסה את השלבים 38-40. \n\n\n\nתרגיל 42:\n\n\n\nהוסיפו תנאי עצירה אם סכום גדול מ 21 או אם סכום שווה ל 21 ואז תרשמו \"win\".\n\n\n\nתרגיל 43:\n\n\n\nהוסיפו בחירה של עוד 2 קלפים לפני הלולאה, וקלף נוסף אם בוחר המשתמש. הוסיפו סכום נוסף והשוו ל 21.\n\n\n\n\n\n\n\nמתקדם:\n\n\n\nהוסיפו תכונה של \"חבר\" לפרופיל. חבר הוא מי שיש לו לפחות תחביב משותף אחת.\n\n\n\nאחר כך חברים לפי דירוג כמה תחביבים משותפים.\n\n\n\nגרף\n\n\n\nבחירת תחביב לפי תחביבים פופולרים (משותפים)\n\n\n\n\n\nשפרו את הפורמט של הפרופיל כך שהקו מתחת לכותרת יהיה בדיוק ברוחב של הטקסט.\n\n\n\n\n\nבצעו בדיקת איות על התחביבים שמכניס המשתמש (יש להשתמש בספריה חיצונית).\n\nאם יש הבדל בין תוצאת הבדיקה לקלט, יש להציע תיקון ולתת למשתמש לבחור אם לתקן או לא (\"did you mean...\") \n\n הרשימה תכיל רק מילים שתוקנו."}, {"filename": "css-summary.docx", "content": "חזרה על שיעורי בית: \n\nHidden\n\nזהו input שלא נראה למשתמש אבל נשלח עם form submit כמו כל input אחר.\n\nCSS\n\nContainer\n\nמיכל שבתוכו \"נזרוק\" אלמנטים, בדכ div\n\nSelectors\n\nelement (type)\n\nClass\n\nId\n\nattribute\n\npseudo\n\nשילובים שלהם (https://www.w3schools.com/cssref/css_selectors.php)\n\n\n\nCSS נותן לנו עיצוב, אבל מבנה הנתונים (למשל של card) הוא שיקול פונקציונלי.\n\n\n\nנתמקד בכמה יכולות יחסית חדשות ומתקדמות של CSS.\n\n\n\nLayout\n\nFlex\n\nFlex container\n\nFlex items\n\n\n\nתרגיל: \n\n1. להכניס לוגו של פייסבוק ל navbar כך שהתמונה תהיה בגודל קטן\n\n(בערך אות אחת).\n\n2. לסיים את דף המוצרים באתר הקוסמטיקה:\n\nלעצב CSS בסגנון card עבור מוצר עם תמונה\n\nלסדר את המוצרים ב flex"}, {"filename": "dictionaries-files.docx", "content": "שיעורי בית: dictionary וקבצים\n\n\n\n1. כיתבו תוכנית המייצרת מילון המכיל שמות ומספרי טלפון. השמות והמספרים יווצרו ע\"י מספרים רנדומליים. לדוגמה:\n\nהערך של:\n\nphones[\"user17\"]\n\nיתן:\n\n054-3334444 \n\n\n\n2. כיתבו תוכנית כנ\"ל אבל עם כתובות מייל במקום מספרי טלפון.\n\n\n\n3. כיתבו פונקצייה המקבלת את המילון משאלה 1 ושומרת את הנתונים בפורמט CSV לקובץ. הגישה לקובץ תהיה במוד append, כלומר שמירת נתון חדש לא ידרוס את הנתונים הקודמים אלא ישמר אחריהם.\n\nדוגמא לקובץ:\n\nuser43,054-2223333\n\nuser17,0543334444  \n\n\n\n4. כיתבו פונקציה המקבלת שם של קובץ CSV (נתיב מלא), קוראת ממנו את הנתונים ויוצרת מהם את המילון של שאלה 1.\n\n\n\n5. כיתבו פונקצייה המבצעת חיפוש בשמות במילון משאלה 1. הפונקציה תקבל מילת חיפוש ותחזיר מילון עם הערכים שנמצאו.\n\n\n\n6. שנו את שאלה 5 כך שהחיפוש יהיה במספרי טלפון ולא בשמות.\n\n\n\n7. שנו את תשובה 3,4 כך שהנתונים במילון יהיו כתובות מייל ומספרי טלפון. האם ניתן להשתמש במילונים שיצרתם בשאלות 1,2? אם כן, עשו זאת.\n\n\n\n8. כיתבו תוכנית המבצעת login עם 5 שמות משתמשים וסיסמאות השמורים במילון."}, {"filename": "django-summary-images-2.docx", "content": "סיכום Flask\n\n\n\nFlask זה סוג של Framework\n\nRoutes\n\nTemplates\n\nStatic\n\nSessions\n\n\n\nמבוא ל Django\n\n\n\nDjango זה framework (דומה מאד ל flask מבחינת פיתוח אפליקציית web)\n\nRoutes\n\nTemplates\n\nStatic\n\nSessions\n\nORM\n\nאפליקציות מובנות (למשל אפליקציה ברירת מחדל שאומרת שהכל בסדר)\n\n\n\n תרגיל Django views and URLs\n\n\n\n(path זה כמו route ב flask)\n\n\n\nבמקום המחרוזת Hello World תכתבו שידפיס Hello Django\n\nהוסיפו view כך שלפונקציה שקשורה ל path /polls/  תדפיס Hello Again\n\nהוסיפו path ל index כך שאם נכנסים ל /polls/hello מקבלים את ה Hello World המקורי\n\nשנו את הנתיבים כך שה URL מתחיל ב johnbryce:\n\n/johnbryce/polls/\n\n/johnbryce/polls/hello\n\n\n\n\n\nORM\n\nמודלים models\n\nמודל זה Class שמחובר לטבלה ב database\n\n\n\nעשינו את זה ידנית (בלי ORM) עם מוצרים בחנות.\n\n\n\nב Django החיבור בין ה class לטבלה נעשה אוטומטית ע\"י Model\n\n\n\nשלבי עבודה עם models:\n\nכותבים class שיורש מ Model\n\npython manage.py makemigrations polls\n\npython manage.py migrate\n\n\n\nהפקודה הזאת מייצרת SQL מתוך ה classes\n\nב database  של Django רואים שנוצרו הטבלאות לפי ה classes\n\nDb.sqlite3\n\n\n\n\n\nהערה לגבי תכנון:\n\n\n\nאפליקציית סקרים עם שאלות ותשובות.\n\n\n\nמהו הקשר שאנו רוצים בין שאלה לתשובה?\n\n\n\nלכל שאלה יש בדיוק תשובה אחת\n\nלכל שאלה יש כמה תשובות\n\nלכל שאלה יש כמה תשובות, ולכל תשובה יש כמה שאלות\n\n\n\nמבחינת המושגים, ל3 האפשרויות הנ\"ל יש שמות:\n\n\n\nOne to One, 1:1 \n\nOne to Many, 1:N\n\nMany to Many, M:N\n\n\n\n\n\nתרגיל תאוריה:\n\n\n\nמה הקשר בין תלמיד לכיתה? \n\n\n\nמה הקשר בין תלמיד לקורס? \n\n\n\n\n\nטכנית, ממשים את היחסים עם FOREIGN KEY\n\n\n\n\n\nתרגיל 1 (עד 19:20):\n\n\n\nבפרוייקט של הסטודנטים:\n\n\n\nליצור 2 מודלים עבור תלמיד וקורס עם יחס One to Many בינהם (כלומר בקורס יכולים להיות כמה תלמידים)\n\nקורס:\n\nשם הקורס\n\nשם המורה\n\nתלמיד\n\nשם התלמיד\n\nלאיזה קורס משוייך\n\nלהכניס ל DB 3 קורסים\n\nלעשות  pathשמציג את כל הקורסים שכרגע יש ב DB\n\n\n\nדוגמת הרצה:\n\n\n\nhttp://localhost:8000/courses\n\npython\n\njavascript\n\nhtml\n\n\n\n\n\nתרגיל 2 (עד 20:30):\n\n\n\nהוסיפו 3 תלמידים לקורס פייתון\n\nהציגו אותם ב path\n\nדוגמת הרצה:\n\nhttp://localhost:8000/students\n\ntal \n\ngal\n\nYossi\n\nתרגיל בית (המשך):\n\n\n\nלהוסיף path שמציג את התלמידים בקורס שמופיע ב url:\n\nדוגמת הרצה:\n\nhttp://localhost:8000/students/python\n\nרק תלמידים בקורס פייתון\n\n\n\nhttp://localhost:8000/students/javascript\n\nרק תלמידים בקורס  JS \n\n\n\nלהוסיף path שמציג את שם תלמיד לפי ה id שלו:\n\nדוגמת הרצה:\n\nhttp://localhost:8000/students/1\n\nמציג את שם התלמיד עם  id 1\n\n\n\nלהוסיף path  שמציג שם קורס עבור תלמיד מסויים:\n\n\n\nhttp://localhost:8000/course/student/1\n\nמציג את שם הקורס של תלמיד עם  id=1\n\n\n\nhttp://localhost:8000/course/student/student1\n\nמציג את שם הקורס של תלמיד עם שם student1"}, {"filename": "django-summary-images-3.1.docx", "content": "מפגש 3/4 של Django\n\n\n\nנתמקד ב DB במודלים של Django.\n\n\n\nמודל זה מחלקה שיורשת מ models.Model\n\n\n\nממשק ORM: שולטים ב SQL ע\"י OOP.\n\n\n\nתהליך התרגום בין OOP ל SQL נקרא migrations\n\n\n\nשלב 1: מה אנחנו רוצים?\n\n\n\nתכנון ה DB.\n\nזיהוי של האובייקטים העיקריים (טבלאות) והקשרים בינהם:\n\nתלמיד (שם, מייל, טלפון, ת.ז., ציון)\n\nקורס (שם, תיאור, מועדים)\n\nמורה (שם, פרטים אישיים)\n\n\n\nאילוצים (1:1, 1:M, M:N):\n\nמורה יכול ללמד קורסים\n\nלכל קורס יש מורה אחד (בו זמנית)\n\nבקורס יש יותר מתלמיד אחד\n\nתלמיד יכול לקחת כמה קורסים\n\n\n\nקשרים:\n\nמורה – קורס 1:M (one to many)\n\nתלמיד – קורס: M:N (many to many)\n\n\n\nשאילתות:\n\nכמה קורסים יש? כמה לכל מרצה? כמה למרצה מסויים?\n\nרשימת תלמידים בקורס מסויים? כמה תלמידים בקורס? מה ממוצע ציונים בקורס? ממוצע של תלמיד בקורס? \n\n\n\n\n\n\n\nעבודה עם Models\n\nמשימה1 : למחוק כפילויות בשם בטבלה של הקורסים\n\n ניצור 20 תלמידים, ואחר כך נשייך אותם לקורסים\n\nתרגילים (לעשות ב shell עם list comprehension):\n\nצרו שני קורסים נוספים html, css\n\nשייכו 7 תלמידים לקורס HTML ו 4 לקורס CSS (תלמידים שונים)\n\nבונוס: לשייך רנדומלית מספר תלמידים לקורס רנדומלי\n\nהראו את המיילים של התלמידים בקורס פייתון.\n\nבהינתן קורס מסויים, לראות את רשימת התלמידים והשמות שלהם.\n\nנתון תלמיד, לאיזה קורסים הוא רשום\n\nעבור כל הקורסים, מי שמות התלמידים שרשומים לכל קורס (להראות שם קורס ורשימת תלמידים שלו כפי שעשינו בשיעור)\n\nלהראות רשימה של קורסים וכמות תלמידים בכל קורס\n\n\n\n\n\nבונוס: נוסיף קלאס של מרצה ונשייך אותו לקורס ב one to many, נבצע שאילתות נוספות.\n\n\n\nQuerySet\n\nאפשר לעשות lookups שזה בעצם סוגים של פילטר או שאילתות.\n\nStudent.objects.filter(name__startswith=\"a\")\n\nלהדפיס את השמות והמיילים של התלמידים שהשם מתחיל ב a\n\nעם list comprehension\n\nלהדפיס כנ\"ל רק שם פרטי\n\n\n\nלהוסיף לתלמיד תכונה של ציון (ברירת מחדל 0)\n\nלעדכן לכל התלמידים את הציון לערך רנדומלי בין 30 ל 100\n\nלעדכן לאלה שקיבלו פחות מ 70 ציון 75\n\nקישור לכל ה lookups:\n\nhttps://www.w3schools.com/django/django_queryset_filter.php\n\nhttps://docs.djangoproject.com/en/4.1/topics/db/queries/"}, {"filename": "django-summary-images-4.docx", "content": "סיכום Django:\n\n\n\nRoutes: path: נתיב ופונקציה\n\nTemplates\n\nORM\n\n\n\n\n\nתרגיל כיתה (עד 19:15):\n\n \n\nהוסיפו endpoint שמוסיף תלמיד לקורס מסוים בצורה הבאה:\n\n/students/add/tal/python\n\nומחזיר template עם ההודעה הבאה:\n\nThe student tal was added successfully to course python with id 2\n\nלהציג את ההודעה במסך הבית\n\n\n\nתרגיל כיתה:\n\nאיך להציג עבור כל קורס את התלמידים שרשומים אליו?\n\nמה הקשר בין קורס לתלמיד? One to Many, כלומר בקורס אחד יש מספר תלמידים\n\nהאלגוריתם: לולאה שעוברת על כל הקורסים, ולכל קורס לעשות לולאה על כל התלמידים\n\n\n\nתרגילי בית:\n\n\n\nבפרוייקט students, הוסיפו לדף הבית את מספר התלמידים בכל קורס כך שהתצוגה תהיה:\n\n\n\n\n\nהוסיפו מורה לכל קורס, כך שלכל קורס יש מורה אחד. הציגו את המורה בטבלה הנ\"ל בעמודה משלו."}, {"filename": "django-summary-images-5.docx", "content": "סיכום Django:\n\n\n\nRoutes: path: נתיב ופונקציה\n\nTemplates\n\nORM\n\n\n\n\n\nתרגיל כיתה (עד 19:15):\n\n \n\nהוסיפו endpoint שמוסיף תלמיד לקורס מסוים בצורה הבאה:\n\n/students/add/tal/python\n\nומחזיר template עם ההודעה הבאה:\n\nThe student tal was added successfully to course python with id 2\n\nלהציג את ההודעה במסך הבית\n\n\n\nתרגיל כיתה:\n\nאיך להציג עבור כל קורס את התלמידים שרשומים אליו?\n\n\n\nאיך יראה SQL:\n\n\n\nCourses\n\nid\n\nname\n\nteacher\n\n1\n\npython\n\nTal\n\n2\n\npython\n\nTal \n\n\n\nStudents\n\nId\n\nname\n\ncourse\n\n1\n\neyal\n\nPython \n\n2\n\nofek\n\nPython \n\n3\n\ndaniel\n\njavascript\n\n\n\n\n\nCourse_id\n\nStudent_id\n\n\n\n1\n\n1\n\n\n\n2\n\n1\n\n\n\n\n\nSelect name from students where course=\"javascript\"\n\nמה הקשר בין קורס לתלמיד? One to Many, כלומר בקורס אחד יש מספר תלמידים\n\nהאלגוריתם: לולאה שעוברת על כל הקורסים, ולכל קורס לעשות לולאה על כל התלמידים\n\n\n\n\n\n\n\nתרגילי בית:\n\n\n\nבפרוייקט students, הוסיפו לדף הבית את מספר התלמידים בכל קורס כך שהתצוגה תהיה:\n\n\n\n\n\nהוסיפו מורה לכל קורס, כך שלכל קורס יש מורה אחד. הציגו את המורה בטבלה הנ\"ל בעמודה משלו.\n\n\n\nForms\n\nתרגילים (עד 20:00(:\n\nשנו בעזרת ה shell את השאלות ותשובות לתוכן עם משמעות (נניח סקר איזה חברת ביגוד ספורט הכי טובה). לפחות 3 שאלות עם שלוש אפשרויות לכל שאלה.\n\nלהציג בדף הבית טבלה עם סיכום התוצאות שיהיה ברור כמה קולות קיבלה כל תשובה.\n\nלהציג את התשובות שקיבלו הכי הרבה קולות (לכל שאלה, כלומר אם יש 3 שאלות אז להציג 3 תשובות עם הכי הרבה קולות)\n\nתרגול נוסף:\n\nלבדוק מה קורה אם מעבירים ID של תשובה שלא קיימת\n\nלבדוק מה קורה אם מעבירים ID של שאלה שלא קיימת\n\nתרגיל FULL STACK\n\nלפתח אפליקציה contacts עם DJANGO שמאפשרת להוסיף אנשי קשר ולראות אותם.\n\nלשכלל ל CRUD מלא\n\n\n\n\n\n\n\nQueries\n\n\n\nרעיונות לפרוייקטים קטנים\n\nיש בקובץ נושאים לתרגול full stack באנייבלי\n\nאפליקציית סקרים שמבוססת על ה Django tutorial\n\nהרבה רעיונות בקובץ פרוייקטים full stack\n\nStudents"}, {"filename": "dom-images.docx", "content": "תרגיל הגשה חובה\n\n\n\nמועד הגשה: 10.1.2024\n\n\n\nחשוב: לבנות הכל בעזרת ה DOM ללא InnerHTML\n\n\n\nהציגו את הטיסות מה API https://data.gov.il/api/3/action/datastore_search?resource_id=e83f763b-b7d7-479e-b172-ae981ddc6de5&limit=5 עם SPA \n\n\n\nלדוגמא:\n\n\n\n\n\n\n\nהציגו את האוניברסיטאות ב http://universities.hipolabs.com/search?country=israel\n\n כ cards עם קישורים לאתרי האוניברסיטאות שחילצתם מה json.\n\n\n\nלדוגמא:"}, {"filename": "forms-2.docx", "content": "תרגילים:\n\n\n\nתרגיל forms:\n\n\n\nלהוסיף מה שצריך כדי לקבל גם hello עם השם וגם תאריך של היום\n\nלהוסיף בדיקה אם השם שווה לשם שלכם, להחזיר hello, אחרת להחזיר unauthorized\n\nלהוסיף עוד input לשם משפחה ולהחזיר hello עם השם ושם משפחה\n\nלעשות form שמקבל מחיר ומחזיר מחיר + מעמ\n\nלעשות form עם שני inputs כך שאם מכניסים שני מספרים מקבלים חזרה את הסכום\n\nלעשות form שמקבל קופון ואם הקופון נכון מחזיר שקיבלת הנחה 10%\n\nכנ\"ל רק להוסיף input עבור מחיר ואם הקופון נכון להחזיר את המחיר פחות 10%\n\n\n\nתרגיל templates:\n\n\n\nלסיים את כל ה routes עם ה templates המתאימים עם template inheritance כלומר blocks כמו בדוגמא ב add.html"}, {"filename": "forms.docx", "content": "תרגילי form\n\n\n\nטופס השארת פרטים ונחזור אליך\n\nלעצב \"דף נחיתה\" עבור מוצר לבחירתכם ב HTML ו-CSS\n\nתמונה\n\nהסבר, מחיר, מבצע\n\nלהוסיף לדף form של השארת פרטים עם שם, מייל, כתובת, עיר מגורים וטלפון\n\nלהוסיף endpoint מתאים לטפל ב form\n\nלהחזיר אחרי ה submit הודעה שהפרטים נקלטו, להחזיר תוכן שמתאים לעיר, למשל אם העיר היא תל-אביב להחזיר מלל שונה מחיפה.\n\nבונוס: להוסיף את הנתונים ל database\n\nטופס חיפוש\n\nלהציג מלל כלשהו ארוך (נניח באורך עמוד אחד)\n\nבאותו דף form להכנסת מילת חיפוש\n\nEndpoint שמחפש את המילה במלל ומחזיר את השורות בהן המילה נמצאת\n\nבונוס: במקום להחזיר את השורות, למרקר את המילים שמצאתם (אפשר לנסות גם ב JS וגם ב python).\n\nבונוס: בדף הראשי במקום מלל להציג את רשימת המשתמשים שנרשמו מקודם, ולחפש בעמודה מסויימת נניח שם או עיר.\n\nטופס קבלת עזרה\n\nטופס הוספת פוסט: \n\nדף פרופיל של משתמש\n\nטופס הוספת פוסט עם תאריך ומלל\n\nEndpoint שיחזיר את אותו הדף עם הפוסט.\n\nבונוס: לעשות דף פרופיל כזה עבור כל משתמש שנרשם"}, {"filename": "functions-crud.docx", "content": "דרך לארגן את הקוד:\n\nפונקציות – העמקה ונושאים מתקדמים\n\nStack\n\nScope\n\nNamed arguments\n\nDefault arguments\n\nType hints\n\nDoc string\n\nמודולים\n\nדרך לארגן ולשמור נתונים\n\nקבצים - העמקה ונושאים מתקדמים\n\nלפתוח \n\nלקרוא\n\nלכתוב\n\n\n\nפונקציות\n\nאיך פונקציה עובדת מאחורי הקלעים?\n\n\n\nסקופ של משתנה: מאיפה אפשר לקרוא ולשנות אותו.\n\nיש שני סוגים:\n\nGlobal\n\n\tאפשר לגשת אליו מכל מקום בקובץ source.\n\nLocal\n\n\tאפשר לגשת רק מתוך הפונקציה\n\n\n\nפעולות CRUD:\n\nCreate\n\nRead\n\nUpdate\n\nDelete\n\n\n\n\n\n\n\n\n\n\n\n\n\nתרגיל:\n\nנגדיר מילון עם פרטים של רכב:\n\nCar={\"name\":\"mazda\", \"km\":120, \"price\":140, \"model\":2019}\n\nכתבו 4 פונקציות שמבצעות CRUD על נתוני הרכב.\n\nCreate\n\n\tליצור מילון חדש במקום המילון הקיים.\n\nRead\n\n\tמציג את המילון \n\nUpdate\n\n\tמעדכן שדה מסויים למשל מחיר\n\nDelete\n\n\tמוחק שדה מסויים, למשל המודל יהיה \"\"\n\n\n\nדרישות:\n\nהמילון יהיה משתנה גלובלי.\n\nלהשתמש ב named arguments\n\nלתת ערכי default לארגומנטים\n\nלתת type hints\n\n\n\n\n\nקבצים\n\nפתיחה של קובץ טקסט \n\n\n\nמודולים\n\nקובץ עם קוד, בדרך כלל עם פונקציות ואולי משתנים שנרצה למחזר, או כדי להקטין את העומס כדי שלא כל הקוד יהיה בקובץ אחד.\n\n\n\nיש קובץ אחד לפונקציות, למשל crud.py\n\nנהוג לקרוא לו גם API\n\nיש קובץ אחר שמפעיל את הפונקציות, נהוג לקרוא בשם:\n\nMain.py, app.py, client.py\n\n\n\nתרגיל: \n\nנתון הקובץ cars.py והמודול crud.py.\n\nהפונקציה crud.create יוצרת שורה בקובץ CSV.\n\nעליכם לתקן את שאר הפונקציות במודול crud כך שהכל יעבוד:\n\nCreate יוצרת שורה ב CSV\n\nRead קוראת שורה מ CSV\n\nUpdate מעדכנת שורה ב CSV\n\n\tלקרוא את כל הקובץ למבנה נתונים מתאים (למשל טבלה) לבצע את השינוי ולשמור בחזרה את הנתונים בדריסה של הנתונים הלא מעודכנים.\n\nDelete מעדכן עם ערך ריק 0 או \"\""}, {"filename": "garage.docx", "content": "אפליקציית מוסך – הסבה של אנשי קשר\n\n\n\nאיפה מתחילים?\n\n\n\nהגדרת המחלקה\n\nפעולות \n\napp.py\n\n\n\nיצירת נתונים לבדיקות\n\n\n\nתרגיל: כתבו פונקציה שמייצרת 40 מכוניות שונות (עושה את פעולת add 40 פעם).\n\nלהשתדל שהנתונים ייראו אמיתיים (תאריכים, שמות)\n\n\n\nName\towner\tcolor\tyear\t\n\nAudi\ttal\tsilver\t2022\n\nToyota\ttal\tred\t2023\n\n\n\nתרגיל:\n\nלהדפיס את כל הרכבים מתחת לשנת 2020\n\nלהדפיס את כל רכבי אאודי מעל 2020\n\nלהדפיס את כל הרכבים הכחולים\n\nלהדפיס כמה רכבים בצבע זהב יש\n\n\n\nבונוס: חלק מהרכבים עדיין באחריות. איך אפשר:\n\nלהכניס את הנתון הזה לאפליקציה\n\nלבדוק ולהדפיס איזה רכבים עדיין באחריות"}, {"filename": "homework-api.docx", "content": "תרגיל בית: API\n\n\n\nה API הבא:\n\nhttps://api.fda.gov/food/enforcement.json?limit=10000\n\nנותן רשימה של 1000 תרופות שה-FDA ביצעה עליהם ריקול.\n\nכיתבו תוכנית שמוצאת מי היא חברת התרופות שמופיעה הכי הרבה פעמים ברשימה.\n\nעליכם להשתמש בספרייה urllib או requests (https://www.w3schools.com/python/module_requests.asp)"}, {"filename": "html-css-images.docx", "content": "תרגילי בית HTML CSS\n\n\n\nHTML\n\n\n\n1. כיתבו אתר סטטי ללא עיצוב CSS (אפשר להכין את שמות ה-classes) עם 3 דפים (בית, מוזיקה וסרטונים) לשיתוף קבצי מוזיקה וסרטונים (ראו דוגמא עם עיצוב בהמשך). השתמשו בתגיות audio ו-video. המדיה עצמה תהיה בקבצים שמורים בתיקיית media.\n\nאפשר להוריד מדיה לדוגמא כאן:\n\nhttps://filesamples.com/formats/mp3\n\nhttps://filesamples.com/formats/mp4\n\n\n\nהאם ניתן לתת קישורים חיצוניים לקבצי המדיה  במקום לשמור את הקבצים לוקאלית?\n\n\n\nבונוס: שתפו באתר גם סרטונים מ youtube.\n\n\n\nמבנה התיקיות של הפרוייקט צריך להראות כך:\n\n\n\n\n\n\n2. השתמשו ב iframe כדי לממש את הניווט באתר הנ\"ל כך שלא צריך לשכפל את ה navbar בכל דף.\n\n\n\n3. הוסיפו דף עם טופס הרשמה לאתר (רק את ה-UI, ההרשמה לא באמת תעבוד). הטופס צריך לכלול  inputs עם הסוגים הבאים לפחות:\n\nצבע מועדף\n\nתאריך לידה\n\nכתובת מייל – מה קןרה אם מכניסים טקסט בפורמט לא נכון?)\n\nהעלאת קבצי MP3\n\nhidden עם name \"customer\"ו value \"333\". מה קורה כשעושים submit?\n\nשימוש בתמונה בתור כפתור submit ללא CSS\n\nחודש ויום של יום הולדת\n\nמספר ילדים מוגבל בין 1 ל 5 עם ערך ברירת מחדל 2\n\nסיסמא בין 8ל 12תווים\n\nradio לבחירת פורמט קובץ מועדף (mp3 או wav)\n\nrange לעוצמת ווליום מועדפת\n\nreset לאיפוס הטופס\n\nמספר טלפון בפורמט של נייד ישראלי\n\nמספר טלפון בפורמט של נייח ישראלי\n\nשעה נוחה להתקשר\n\nקישור לאתר – מה קורה אם מכניסים פורמט לא נכון?\n\nשבוע מועדף לחופשה \n\nשימוש בתגיות meter ו-progress כדי להראות התקדמות של מילוי טופס (הערך יהיה דמה, לא באמת מראה ערך אמיתי).\n\nשימוש ב-select ו- option כדי לבחור זכר או נקבה\n\ntextarea להוסיף about me.\n\n\n\n4. בלי קשר לתרגילים הקודמים, בנו דף הסבר על full stack ע\"י image map. השתמשו בתגית map והוסיפו קישורים חיצוניים מתאימים להסברים על החלקים בתמונה הבאה: \n\nhttps://images.yourstory.com/cs/1/34c44d70-8c3b-11e9-a628-2de2d65c0f6f/Full_Stack_Development_11564481550157.jpg\n\n\n\n\n\nקישורים להסברים על frontend ו backend\n\nקישור להסבר על UI עם HTML CSS JS\n\nקישור להסברים על web server\n\nקישור להסבר על database SQL ו NOSQL\n\n\n\nכדי למצוא את הקואורדינטות אפשר להשתמש בכלי https://inkplant.com/tools/image-coordinates.\n\n\n\n5. השתמשו במבנה תיקיות וקוד קיים של האתר הקודם כדי לבנות אתר נוסף לחנות חיות. נסו למחזר כמה שיותר מהקוד הקיים.\n\n\n\n6. כמו תרגיל 5 רק אתר Blog.\t\n\nCSS\n\n\n\n\n\n1. השתמשו ב flex כדי לעצב את סרגל הניווט של האתר מתרגיל 1, וגם את ה-layout של האלמנטים של התוכן. השתמשו בפונט מ google fonts, ראו:\n\nhttps://www.w3schools.com/cssref/css3_pr_font-face_rule.php\n\nhttps://www.w3schools.com/csS/css_font_google.asp\n\n\n\nלדוגמא:\n\n\n\n\n\n\n\n\n\n2. השתמשו ב-grid כדי לעצב את עמוד הסרטונים כך שיהיו3  סרטונים בכל שורה. מה עדיף לדף זה, grid  או flex?\n\n\n\nלדוגמא:\n\n\n\n\n\n\n\n5. הוסיפו אפקט של hover עם transform שמגדיל את הסרטון ב 10% רק בדף של הסרטונים, לדוגמא:\n\n\n\n\n\n\n\n6. השתמשו ב-bootstrap CSS במקום CSS משלכם עבור התרגילים הנ\"ל.\n\n\n\n7. השתמשו ב-grid, flex ובאלמנטים המתאימים כדי לעצב את ה-layout הבא:\n\n\n\n\n\nרמז: \n\n\n\n4. בדקו את הרספונסיביות של האתר ונסו להפוך לכמה שיותר רספונסיבי.\n\n\n\n1. הפכו את התמונה מתרגיל 4 לרספונסיבית: ראו https://www.w3schools.com/howto/howto_css_image_responsive.asp"}, {"filename": "html-images-3.docx", "content": "תרגיל בית HTML 3\n\n\n\nבנו מסך לוגין שמקבל שם משתמש וסיסמא בעיצוב כמה שיותר דומה:\n\nהשתמשו בתכונה placeholder כדי להדפיס Username בתוך ה input."}, {"filename": "html-petshop.docx", "content": "תרגיל בית HTML 2\n\n\n\nבנו אתר לחנות חיות עם 4 דפים: דף ראשי עם חדשות ומבצעים, דף מוצרים, דף \"עלינו\", דף \"צור קשר\".\n\n\n\nכל דף צריך להיות מקושר לתפריט בדף הראשי, עם כפתור \"חזור\".\n\n\n\nהעיצוב צריך להיות בקובץ CSS לפי classes מתאימים.\n\n\n\nיש להשתמש ב DIVS."}, {"filename": "html.docx", "content": "מה בהמשך הקורס:\n\n\n\nמסיימים את ה frontend:\n\nHTML\n\nCSS\n\nJavascript\n\nממשיכים ב backend:\n\nPython\n\nFlask\n\nנלמד עוד טכניקות, למשל OOP, למשל תכנון של \n\nעולם ה data:\n\nSQL\n\nJSON\n\nאם יהיה זמן:\n\nReact\n\nCloud\n\nכל הנ\"ל נקרא Full Stack\n\nHTML\n\nמבנה תיקיות נכון של אתר סטטי:\n\n\n\nתכנון ה-URL\n\nמה זה URL?\n\nhttp://tal.com/\n\nהסלאש האדום זאת תיקיית הפרוייקט שלנו. מכאן אנחנו קובעים את המבנה ההיררכי. \n\n\n\nההיררכיה הנכונה:\n\nIndex.html\n\nזה דף הבית נקודת הכניסה כשמישהו מכניס את ה URL  של האתר.\n\nתת-תיקיות לפי סוג התוכן או חלקים באתר.\n\n\n\nבאתר סטטי, מבנה התיקיות הוא מבנה ה-URL \n\nשמות הם תמיד יחסיים לתיקיית האב /\n\nלדוגמא:\n\nhttp://localhost:3000/images\n\nhttp://localhost:3000/docs\n\nמאד חשוב לשמור על עקביות בשמות ובנתיבים.\n\nלמשל, כל התמונות תמיד בתיקיית images\n\nאז איך מגיעים לתמונה בלי נתיב מלא?\n\nעוד פורמטים של מסמכים ב-WEB:\n\nXML\n\nJSON\n\n\n\nתגיות חשובות ב-HTML:\n\nMeta\n\nSEO\n\nForm\n\nתרגיל:\n\nלבנות form  חיפוש עם action לגוגל, כשלוחצים כל כפתור חיפוש נפתח גוגל עם תוצאות החיפוש למילת החיפוש שהכנסנו באתר שלנו.\n\n\n\nhttps://www.google.com/search?q=google\n\nולידציה: אימות שסוג הנתונים הוא כרצוי.\n\nלמשל input type=number\n\n\n\niframe\n\nתרגיל: navbar שלא צריך לשכפל בכל עמוד\n\n אלא משתמש ב iframe כדי להציג תוכן מעמודים אליהם מנווטים.\n\nNavbar זה div שבתוכו קישורים לדפים אחרים.\n\nהקישורים ייפתחו בדף אחר שאין בו navbar\n\nאם ה target של הקישור הם שם ה iframe אז הקישור\n\nיפתח בתוך ה iframe כלומר באותו דף שיש בו את ה navbar"}, {"filename": "javascript-spa.docx", "content": "מה נעשה היום:\n\n\n\n1. פרוייקט לדוגמא של תלמידה מקורס אחר\n\n2. נלמד לממש SPA: לצרוך API עם JS\n\n\n\nבפרוייקט SPA מינימלי יש 3 קבצים:\n\nHTML \n\nJS\n\nצריך לטעון את הנתונים מה API\n\nלרנדר אותם בתוך הדף\n\nCSS\n\n\n\n3. השלמות והרחבות ב JS\n\n\n\n\n\n\n\nתרגיל כיתה:\n\nלהציג את המחיר ביטקוין המעודכן כשלוחצים על הכפתור:\n\nhttps://api.coindesk.com/v1/bpi/currentprice.json\n\n\n\n\n\n\n\n\n\nתרגיל כיתה:\n\nלהשתמש ב https://api.agify.io/?name=robert\n\nאם הגיל שחוזר הוא פחות מ 30 להציג \"אתה צעיר\"\n\nאחרת להציג \"אתה זקן\"\n\n\n\n\n\nJavascript\n\n\n\n1. פונקציות חץ אנונימיות (פונקציות ללא שם שניתן להגדיר אותן בזמן שמשתמשים בהן. קצת דומה ל lambda).\n\n2. axios ספרייה צד שלישי כמו requests\n\n3. format string `https://api.agify.io/?name=${name}\n\n`\n\n\n\n\n\nMap\n\n\n\nעד עכשיו התמודדנו עם ערכים בדידים כמו מספר או מחרוזת. אם יש רשימה, משתמשים\n\nב map.\n\n\n\nיצירת אלמנטים ב JS באופן דינמי.\n\n\n\nדרושות שתי פעולות, יצירה והוספה:\n\nd=document.createElement(\"div\")\n\ndocument.body.appendChild(d)\n\n\n\nתרגיל בית:\n\n1. הוסיפו ל body אלמנט div בצבע כחול כך שה parent שלו יהיה ה body\n\n2. הוסיפו לאלמנט החדש הכחול אלמנט נוסף div בצבע צהוב כך שהצהוב יהיה הבן של הכחול.\n\n3. הציגו את הטיסות באתר gov.il עם SPA\n\n4. הציגו את האוניברסיטאות ב http://universities.hipolabs.com/search?country=israel\n\n כ cards עם קישורים לאתרי האוניברסיטאות שחילצתם מה json."}, {"filename": "javascript-summary-1.docx", "content": "מבוא ל Javascript\n\n\n\nJS היא שפת תכנות.\n\n\n\nאין לה מתחרים ב front.\n\n\n\nשפה כללית, אפשר לפתח כל דבר, גם ל web אבל גם דברים אחרים.\n\n\n\nכל יכולות הליבה:\n\n\n\nמשתנים ו types\n\nב JS המשתנים הם אוטומטיים, כלומר מתבצעת המרה אוטומטית לפי הצורך.\n\nיש הרחבה ל-JS שקוראים לה TYPESCRIPT שנותנת יכולות של strong typing כלומר בדיקה לפני ההרצה שה type מתאים.\n\nתנאים\n\nלולאות\n\nCollections\n\nפונקציות\n\n\n\nגם אפשרות ל OOP, תמיכה בקלאסים וכו'.\n\n\n\nאיך מפתחים ב JS?\n\n\n\nסביבת עבודה:\n\nVS Code תומך ב JS\n\nהשלמות לא תמיד יעבדו, בעיקר אם זה למשל ID של אלמנט:\n\nMain.style…….\n\nחשוב: השמות של תכונות של אובייקטים ב DOM לא תמיד זהים לשמות של תכונות ב CSS, \n\nלמשל: style.backgroundColor\n\nולא background-color\n\n\n\nלבדיקות ומשחקים, יש את console ב dev tools\n\nבתוך קובץ נפרד בדומה ל CSS שעושים לו מעין import מ HTML\n\n<script src=\"XXX\">  </script>\n\nמעין inline, אפשר בתוך התגית script\n\nמי שמריץ את ה JS זה הדפדפן.\n\nבעצם מקבלים API לדפדפן, כלומר יכולת לתכנת את הדפדפן, או יותר נכון את הדף שלנו.\n\n\n\nDOM\n\nDocument Object Model\n\nכל ה HTML ו CSS  שלנו בדף נכנס לתוך ה DOM וכך אפשר לשלוט בו עם JS.\n\n\n\nEvent Driven Programming\n\n\n\nEvent\n\nאירוע, משהו שקורה בדרך כתגובה למשהו אחר. למשל, לחיצה על כפתור מפעילה אירוע של click.\n\nאנחנו יכולים לכתוב פונקציה ולחבר אותה ל event כך שכשהאירוע קורה הקוד שלנו ירוץ. \n\n\n\nEvent Handler\n\nזה הקוד (פונקציה) שהאירוע מפעיל.\n\n\n\nתנאים\n\nכמו בפייתון, משתמשים במבנה של IF"}, {"filename": "oop.docx", "content": "תרגיל לימוד עצמי בנושא OOP\n\n\n\nהתרגיל הינו רשות ואין חובה להגיש. \n\n\n\nעליכם לממש משחק בלקג'ק ע\"י שימוש במחלקות הבאות:\n\nקלף: השתמשו באותן תכונות שלמדנו בתרגילים על מילונים. \n\nחפיסת קלפים: מכילה רשימה של אובייקטים מסוג קלף ופעולות מתאימות כגון ערבוב וחלוקת קלפים.  \n\nבאיזה עוד מחלקות כדאי להשתמש? תכננו וממשו בהתאם. \n\n\n\nבהצלחה וחג שמח"}, {"filename": "petshop.docx", "content": "תרגיל הכנה לבחינה: חנות חיות\n\n\n\nאיריס עובדת בחנות חיות המוכרת מספר מוצרים. עיזרו לאיריס לענות על השאלות הבאות ע\"י ניתוח של קובץ הנתונים animals.csv\n\n\n\nמהו המוצר היקר ביותר בחנות?\n\n\n\nהנחיות: \n\n- עבור שאלה זו והשאלות הבאות יש תחילה לכתוב פונקציה שבונה טבלה (רשימת מילונים):\n\n\t- לפתוח את הקובץ עם open ולקרוא את השורות לתוך רשימה\n\n\t- לייצר טבלה מרשימת השורות כפי שלמדנו\n\n\t- אחרי שיש לנו טבלה, לייצר ממנה רשימה רק של המחירים ע\"י לולאת for וחילוץ עמודת המחיר \n\n\t- את רשימת המחירים להכניס ל max כדי לקבל את המקסימום ולהחזיר אותו.\n\n\n\nמהו המחיר הממוצע של מוצר מסוג dog_food?\n\n\n\nהנחיות: כנ\"ל רק במקום max יש להשתמש ב statistics.mean\n\n\n\nכמה חברות שונות של dog_food יש? מהן החברות?\n\n\n\nהנחיות: כנ\"ל רק במקום חישוב ממוצע יש לבצע set על רשימת החברות ולקבל קבוצה המכילה רק את החברות השונות בלי חזרות.\n\n\n\nמהם סוגי המוצרים הקיימים?\n\n\n\nהנחיות: כנ\"ל רק על עמודת type\n\n\n\nמהו המחיר חציון של מוצרי אוכל לכלבים של חברת UBUTU?\n\n\n\nהנחיות: כנ\"ל רק לסנן את מחירי החברה הספציפית עם if ולבצע חציון על רשימת המחירים:\n\nפונקציית חציון (median) יש בספריית statistics:\n\nimport statistics\n\nstatistics.median(mylist)\n\n\n\nמהו המחיר הממוצע לכל סוג מוצר?\n\n\n\nהנחיות: ליצור מילון שהמפתחות הם סוגי המוצרים והערכים הם הממוצעים. את סוגי המוצרים מקבלים מהפונקציה של תרגיל 2, ואז עושים לולאה בתוך לולאה: לולאה חיצונית על סוגי המוצרים, ולולאה פנימית לכל סוג מוצר לחשב את הממוצע באותו אופן כמו תרגיל 2."}, {"filename": "react-1.docx", "content": "REACT ריאקט\n\n\n\nריאקט זה Javascript Framework\n\n\n\nסביבת עבודה\n\nמתמקד בטכנולוגיה ספציפית (frontend, browser)\n\nהתקנה של ספריות שנותנות לנו כלים מוכנים מראש\n\n\n\nריאקט משדרג את היכולת להוסיף אלמנטים HTML. \n\n\n\nהשידרוג הוא יחסית ל \"vanilla javascript\" הכוונה ל JS המובנה ללא תוספות.\n\n\n\nריאקט נותן שילוב של HTML ו JS ביחד.\n\n\n\nחומר עזר:\n\nhttps://react.dev/learn\n\nhttps://www.w3schools.com/REACT/default.asp\n\n\n\nהתקנות \\ setup:\n\n\n\nשתי אפשרויות:\n\n\n\nמצב הרגיל בפיתוח: שימוש ב script src עם URL מ CDN. צריך להוריד לדפדפן את הספריות של ריאקט (כמו שעשינו עם axios)\n\nמצב בפרודקשן: להתקין על הרשת את הספריות האלה. הרבה פעמים משתמשים בשרתי NodeJS ועובדים עם כלי התקנה שנקרא NPM.\n\n\n\nטכניקות כתיבה בריאקט\n\n\n\nבריאקט כותבים קומפוננטות Components\n\n\n\nקןמפוננטה היא בעצם פונקציה שכוללת JSX\n\nצריך לרנדר את הקומפוננטה בדף שלנו בדרך בתוך div.\n\nבשביל להעביר לקומפוננטה ארגומנטים (מידע) משתמשים ב properties או props\n\n\n\nתרגיל כיתה:\n\nלכתוב קומפוננטה (Dog) שמציגה תמונה אחרת (של כלב) \n\nבמקום התמונה של החתול\n\n\n\nתרגיל כיתה:\n\nלכתוב קומפוננטה Cat שמציגה את החתול\n\nלהכניס אותה ל Pictures כך שתוצג יחד עם \n\nDog\n\n\n\nתרגילי כיתה\n\n\n\nלכתוב קומפוננטה בשם ImageStories שמכילה 2 קומפונננטות ImageStory אחת עם כלב\n\nוהשנייה עם חתול.\n\n\n\nלכתוב קומפוננטה בשם DogStory שיש בה תמונת כלב, סיפור כלב ושם הכלב. \n\nהתמונה והסיפור קבועים מראש, שם הכלב מתקבל ב props.\n\n\n\nכנ\"ל אבל גם התמונה והסיפור מתקבלים ב Props.\n\n\n\nכנ\"ל ולהוסיף קישור שה URL מתקבל ב props.\n\n\n\nלכתוב קומפוננטה DogStories שמכילה 3 DogStory עם כלבים שונים.\n\n\n\n הפסקה עד 20:20"}, {"filename": "react-2.docx", "content": "המשך REACT\n\n\n\nתכנית העבודה:\n\n\n\nJSX\n\nComponents\n\nEvents\n\nHooks\n\n\n\nכשנסיים:\n\n\n\nשילוב של REACT ו backend API\n\n\n\nJSX\n\n\n\nדוגמא:\n\n\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<script type=\"text/babel\">\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      function Hello() {\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t        return <h1>Hello World!</h1>;\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      }\n\nזה HTML בתוך JS.\n\n\n\nComponents\n\n\n\nזה פונקציה שמכילה JSX. \n\nאפשר להשתמש בשם של הפונקציה כדי ליצור אלמנט חדש.\n\nדוגמא: ניקח את ה JSX הפשוט שעשינו ונהפוך אותו לקומפוננטה (פונקציונלית).\n\n\n\n\n\n\n\n\n\nEvents\n\n\n\nתרגילים:\n\nכתבו רכיב שמקבל prop מספר כלשהו, כשלוחצים בודק אם המספר גדול מ 100 צובע את ה div באדום, אחרת בירוק.\n\n<div id=\"myDiv\"></div>\n\nmyDiv.style.backgroundColor=\"red\";\n\n\n\nכנ\"ל רק שהמספר לבדיקה מגיע מ input.\n\n<input id=\"myInput\"/>\n\nNum=myInput.value\n\n\n\nכנ\"ל רק להכניס ב input צבע ולשנות את הצבע לצבע שהתקבל.\n\n\n\nרכיב שמקבל גיל ואם מתחת לגיל 18 צובע באדום אחרת בירוק\n\n\n\nרכיב שמקבל קוד ואם הקוד נכון מדפיס \"קיבלת 10% הנחה\", ב prop להעביר את הקוד הנכון\n\n\n\nכנ\"ל רק לקבל קוד קופון ואם הקוד נכון להציג תמונה מתאימה (לשלוח ב prop מילון עם קוד ותמונה)\n\n\n\nרכיב שמקבל רשימה של רחובות ובודק מול input אם רחוב קיים צובע בירוק אחרת אדום.\n\n\n\nonChange קורה ברגע שמכניס את הערך ל input\n\n\n\n\n\n\n\n\n\n\n\n\n\nתרגיל 15: \n\nלהגדיר רשימה של מילונים עם todos:\n\nשם משימה\n\nתאריך\n\nDate(\"13-02-2023\")\n\nתיאור\n\nלכתוב רכיב שמציגה רשימה (טבלה) עם ה todos\n\nלעצב את הרשימה  עם CSS\n\nלהדפיס כמה משימות יש (מספר)\n\nList.length\n\nלבדוק האם התאריך של המשימה עבר, כלומר הוא קטן מהתאריך של היום. אם כן להציג באדום\n\nלהוסיף לאובייקט תכונה completed כן או לא. אם כן להציג בירוק.\n\nלהוסיף רכיב נפרד שמציג את מספר המשימות שהושלמו (תסתכלו על המתודה filter של array)\n\nלהוסיף רכיב נפרד שמציג את מספר המשימות שמאחרות\n\n\n\nתרגיל 16:\n\nלכתוב רכיב שמציג רשימה של אנשי קשר (מילונים עם שם וטלפון), ו תיבת חיפוש\n\nאם השם שמכניסים בחיפוש קיים ברשימה, לצבוע אותו בצהוב."}, {"filename": "react-images.docx", "content": "המשך REACT\n\n\n\nתכנית העבודה:\n\n\n\nJSX\n\nComponents\n\nEvents\n\nHooks\n\n\n\nכשנסיים:\n\n\n\nשילוב של REACT ו backend API\n\n\n\nJSX\n\n\n\nדוגמא:\n\n\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<script type=\"text/babel\">\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      function Hello() {\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t        return <h1>Hello World!</h1>;\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      }\n\nזה HTML בתוך JS.\n\n\n\nComponents\n\n\n\nזה פונקציה שמכילה JSX. \n\nאפשר להשתמש בשם של הפונקציה כדי ליצור אלמנט חדש.\n\nדוגמא: ניקח את ה JSX הפשוט שעשינו ונהפוך אותו לקומפוננטה (פונקציונלית).\n\n\n\n\n\n\n\n\n\nEvents\n\n\n\nתרגילים:\n\nכתבו רכיב שמקבל prop מספר כלשהו, כשלוחצים בודק אם המספר גדול מ 100 צובע את ה div באדום, אחרת בירוק.\n\n<div id=\"myDiv\"></div>\n\nmyDiv.style.backgroundColor=\"red\";\n\n\n\nכנ\"ל רק שהמספר לבדיקה מגיע מ input.\n\n<input id=\"myInput\"/>\n\nNum=myInput.value\n\n\n\nכנ\"ל רק להכניס ב input צבע ולשנות את הצבע לצבע שהתקבל.\n\n\n\nרכיב שמקבל גיל ואם מתחת לגיל 18 צובע באדום אחרת בירוק\n\n\n\nרכיב שמקבל קוד ואם הקוד נכון מדפיס \"קיבלת 10% הנחה\", ב prop להעביר את הקוד הנכון\n\n\n\nכנ\"ל רק לקבל קוד קופון ואם הקוד נכון להציג תמונה מתאימה (לשלוח ב prop מילון עם קוד ותמונה)\n\n\n\nרכיב שמקבל רשימה של רחובות ובודק מול input אם רחוב קיים צובע בירוק אחרת אדום.\n\n\n\nonChange קורה ברגע שמכניס את הערך ל input\n\n\n\n\n\n\n\n\n\n\n\n\n\nתרגיל 15: \n\nלהגדיר רשימה של מילונים עם todos:\n\nשם משימה\n\nתאריך\n\nDate(\"13-02-2023\")\n\nתיאור\n\nלכתוב רכיב שמציגה רשימה (טבלה) עם ה todos\n\nלעצב את הרשימה  עם CSS\n\nלהדפיס כמה משימות יש (מספר)\n\nList.length\n\nלבדוק האם התאריך של המשימה עבר, כלומר הוא קטן מהתאריך של היום. אם כן להציג באדום\n\nלהוסיף לאובייקט תכונה completed כן או לא. אם כן להציג בירוק.\n\nלהוסיף רכיב נפרד שמציג את מספר המשימות שהושלמו (תסתכלו על המתודה filter של array)\n\nלהוסיף רכיב נפרד שמציג את מספר המשימות שמאחרות\n\n\n\nתרגיל 16:\n\nלכתוב רכיב שמציג רשימה של אנשי קשר (מילונים עם שם וטלפון), ו תיבת חיפוש\n\nאם השם שמכניסים בחיפוש קיים ברשימה, לצבוע אותו בצהוב."}, {"filename": "sql-images-5.docx", "content": "תרגיל כיתה: \n\nלהוסיף לאפליקציה יכולת לעדכן סיסמא לעצמי (ליוזר המחובר) (בלי לראות אותה)\n\nלהוסיף כפתור \\ קישור לדף הראשי \"reset password\"\n\nלהוסיף קוד שצריך כדי שהמשתמש יכניס סיסמא חדשה והיא תתעדכן ב DB\n\nלבדוק שהלוגין עובד עם הסיסמא המעודכנת\n\nלהוסיף אפשרות לעדכן סיסמא של משתמש כלשהו ברשימה\n\n\n\nתרגילי בית\n\nלהגביל פעולה של איפוס סיסמא רק למשתמש שנקרא admin\n\nלהוסיף כפתור איפוס סיסמא למסך לוגין\n\nלהוסיף אפשרות לשתף עם משתמש כלשהו קישור לאיפוס סיסמא\n\nשיקח אותו למסך איפוס סיסמא\n\n\n\nhttp://user.com/reset_password?\n\n\n\nלהוסיף ל flow של הוספת משתמש אפשרות להגדיר אם הוא admin או לא\n\nבונוס: להוסיף איזה הרשאות יש למשתמש כשמוסיפים אותו (למשל לעדכן, למחוק, לשנות סיסמא למישהו אחר)\n\n\n\n\n\n\n\nHTTP\n\nHTTP\n\nFLASK\n\nSQL DB \n\nFLASK\n\nSQL DB \n\nHTML\n\nCSS\n\nJS\n\nדפדפן \n\nHTML\n\nCSS\n\nJS\n\nדפדפן"}, {"filename": "sql.docx", "content": "SQL\n\n\n\nCRUD\n\nCreate\n\nלהכניס נתונים חדשים עם INSERT\n\nRead\n\n\n\nDB Browser for SQLite\n\nמאפשר להריץ SQL בלי פייתון ישירות על קובץ ה DB.\n\n\n\nתרגיל\n\nלשלוף את כל הנתונים בלי כפילויות. אם אין להכניס כפילות עם INSERT\n\nלשלוף רק את השמות\n\nלשלוף את השם ומייל\n\nלשלוף רק את המייל\n\nלשלוף את כל הנתונים על Moshe\n\nלשלוף את המייל של Moshe\n\nלשלוף את המיילים של moshe  ו-tal \n\nיש להשתמש ב  WHERE name=? OR name=?\n\nלהכניס רק שם ומייל חדשים\n\nלהכניס רק מייל חדש\n\nלשלוף את כל מספרי הטלפון שמתחילים ב-053\n\nלשלוף את כל השמות ומספרי הטלפון שמסתיימים ב 4\n\nלשלוף את כתובות המייל של משתמשים שקידומת הנייד שלהם\n\nמתחילה ב-052\n\nלשלוף את כל הנתונים על משתמשים שהקידומת מתחילה ב-052 והשם מתחיל ב t.\n\nליצור טבלה חדשה עבור מוצרים (שם המוצר, מחיר, קטגוריה)\n\nליצור טבלה חדשה עבור ספקים (שם הספק, מספר טלפון)\n\nבונוס: בפייתון לאכלס את הטבלאות החדשות בנתונים עם faker\n\nשנו את השם moshe ל-shira בכל השורות\n\nשנו את מספר הטלפון של טל\n\nשנו את המייל של דני\n\nמחקו את כל אנשי הקשר שהמייל שלהם tal@email.com\n\n\n\nתכנון של DB\n\n\n\nעד עכשיו, למדנו טכנית:\n\nלייצר DB  חדש\n\nלייצר טבלאות בתוכו לפי סכמה (מבנה העמודות)\n\nלבצע שאילתות CRUD\n\n\n\nאיפה מתחילים לתכנן?\n\nמבינים את צרכי האפליקציה לפי CRUD\n\nלמשל ב todo:\n\nלהכניס משימה חדשה\n\nלראות את הרשימה\n\nלראות פרטי TODO\n\nלעדכן פרטי TODO\n\nלמחוק TODO אחד\n\nלמחוק את כל הרשימה\n\nיותר ממשתמש אחד\n\nלכל משתמש יש גישה רק ל TODOS שלו\n\nמכאן לגזור מהם הטבלאות ומה הסכמה?\n\nטבלת משימות (שם, תאריך, סטטוס)\n\nהאם אפשר להכניס את נתוני המשתמש לטבלת ה TODO?\n\nיש קשרים בין נתונים (טבלאות)\n\nסוג ראשון: one to one\n\nבדוגמא, לכל משתמש יש משימה אחת\n\nלכל משימה יש משתמש אחד\n\nלמשל ב contacts לכל איש קשר יש רק מייל אחד\n\nבמקרה כזה לא צריך טבלה נפרדת למיילים\n\nסוג שני: one to many\n\nלכל משתמש יש כמה משימות או\n\nלכל משימה יש כמה משתמשים\n\nצריך טבלה נוספת\n\nסוג שלישי: many to many\n\nלכמה משתמשים יש מספר משימות\n\nלכמה משימות יש כמה משתמשים\n\nדוגמא נוספת: students\n\nסטודנט יכול לקחת כמה קורסים\n\nקורס יכול להכיל כמה סטודנטים\n\nכלי תכנוני מקובל הוא דיאגרמות ER\n\nEntity Relationship\n\nPrimary / Foreign Keys\n\nב SQL אפשר להגדיר כשמגדירים טבלה, מהם ה PK ו FK אם יש.\n\nתרגיל ב LUCID\n\nלחברות רכב יש מוצרים, לכל חברה יש כמה מודלים, למשל חברה: מאזדה, מודל 3. \n\nמהם הטבלאות שצריך להגדיר?\n\nמה הסכמה של כל טבלה?\n\nמהם היחסים (one to many וכו') בין הטבלאות\n\nציירו דיאגרמה מתאימה \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nלשלוף את הנתונים עם SELECT\n\nUpdate\n\nDelete"}, {"filename": "store.docx", "content": "אפליקציית חנות full stack:\n\n\n\nתרגיל בית\n\nShopping Cart\n\nלבחור מוצרים\n\nללחוץ על כפתור buy\n\nמוסיף אותו לרשימת המוצרים (עגלת הקניות) ב session\n\nלשלם על הכל\n\nלחשב את הסכום של כל הרשימה\n\nלסיים את העיצוב CSS\n\n\n\nחשוב להצליח: \n\n\n\nלהפוך עם List comprehension את:\n\ndb.query(\"SELECT name FROM companies\")\n\n\n\nלרשימה של שמות החברות\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nתרגיל:\n\nנתון מוצר, מהי החברה שלו (אפשר את ID)?\n\nנתון מוצר, מהו ה type שלו?"}, {"filename": "todo.docx", "content": "אפליקציית TODO\n\n\n\nעושים הסבה מ JS ל full stack.\n\n\n\nאפיון:\n\nCRUD של משימות\n\nהמשתמש יכול הוסיף\n\n פרוייקט חדש\n\nקטגוריה חדשה\n\nכך שכל משימה תשוייך לפרוייקט וקטגוריה.\n\n\n\nHTML template\n\nEndpoint\n\n\n\nתרגיל:\n\n\n\nאותו דבר עד לשלב 2 (app-2, index-2...) אבל עם contacts.\n\nמהתחלה, פרוייקט חדש, תיקייה חדשה....לא copy paste אלא לכתוב הכל לבד.\n\n\n\nDATA\n\nעד עכשיו: שמרנו ברשימה בזיכרון.\n\nדרישות:\n\nמשימה מקושרת עם פרוייקט וקטגוריה.\n\nאפשר רשימה של רשימות:\n\n[\n\n[\"task1\", \"proj1\", \"cat1\"]\n\n]\n\nאפשר רשימה של מילונים:\n\n[\n\n{\"project_name\":\"proj1\", \"task_name\":\"task1\", \"cat_name\":\"cat1\"}\n\n]\n\nאפשר (רצוי) class:\n\nTask1.name\n\nTask1.category\n\nTask1.project\n\nאם רוצים DB:\n\nלתכנן את הטבלאות:\n\nטבלת tasks(name, category, project)\n\nטבלה project(name)\n\nטבלת categories(name)\n\nמשימות לעתיד:\n\nמחיקת הרשימה עם JS ופייתון"}, {"filename": "django-summary-images-3.docx", "content": "מבוא ל Django\n\n\n\nDjango זה framework (דומה מאד ל flask מבחינת פיתוח אפליקציית web)\n\nRoutes\n\nTemplates\n\nStatic\n\nSessions\n\nORM\n\nאפליקציות מובנות (למשל אפליקציה ברירת מחדל שאומרת שהכל בסדר)\n\n\n\n תרגיל Django views and URLs\n\n\n\n(path זה כמו route ב flask)\n\n\n\nבמקום המחרוזת Hello World תכתבו שידפיס Hello Django\n\nהוסיפו view כך שלפונקציה שקשורה ל path /polls/  תדפיס Hello Again\n\nהוסיפו path ל index כך שאם נכנסים ל /polls/hello מקבלים את ה Hello World המקורי\n\nשנו את הנתיבים כך שה URL מתחיל ב johnbryce:\n\n/johnbryce/polls/\n\n/johnbryce/polls/hello\n\n\n\n\n\nORM\n\nמודלים models\n\nמודל זה Class שמחובר לטבלה ב database\n\n\n\nעשינו את זה ידנית (בלי ORM) עם מוצרים בחנות.\n\n\n\nב Django החיבור בין ה class לטבלה נעשה אוטומטית ע\"י Model\n\n\n\nשלבי עבודה עם models:\n\nכותבים class שיורש מ Model\n\npython manage.py makemigrations polls\n\npython manage.py migrate\n\n\n\nהפקודה הזאת מייצרת SQL מתוך ה classes\n\nב database  של Django רואים שנוצרו הטבלאות לפי ה classes\n\nDb.sqlite3\n\n\n\n\n\nהערה לגבי תכנון:\n\n\n\nאפליקציית סקרים עם שאלות ותשובות.\n\n\n\nמהו הקשר שאנו רוצים בין שאלה לתשובה?\n\n\n\nלכל שאלה יש בדיוק תשובה אחת\n\nלכל שאלה יש כמה תשובות\n\nלכל שאלה יש כמה תשובות, ולכל תשובה יש כמה שאלות\n\n\n\nמבחינת המושגים, ל3 האפשרויות הנ\"ל יש שמות:\n\n\n\nOne to One, 1:1 \n\nOne to Many, 1:N\n\nMany to Many, M:N\n\n\n\n\n\nתרגיל תאוריה:\n\n\n\nמה הקשר בין תלמיד לכיתה? \n\n\n\nמה הקשר בין תלמיד לקורס? \n\n\n\n\n\nטכנית, ממשים את היחסים עם FOREIGN KEY\n\n\n\n\n\nתרגיל 1 (עד 19:20):\n\n\n\nבפרוייקט של הסטודנטים:\n\n\n\nליצור 2 מודלים עבור תלמיד וקורס עם יחס One to Many בינהם (כלומר בקורס יכולים להיות כמה תלמידים)\n\nקורס:\n\nשם הקורס\n\nשם המורה\n\nתלמיד\n\nשם התלמיד\n\nלאיזה קורס משוייך\n\nלהכניס ל DB 3 קורסים\n\nלעשות  pathשמציג את כל הקורסים שכרגע יש ב DB\n\n\n\nדוגמת הרצה:\n\n\n\nhttp://localhost:8000/courses\n\npython\n\njavascript\n\nhtml\n\n\n\n\n\nתרגיל 2 (עד 20:30):\n\n\n\nהוסיפו 3 תלמידים לקורס פייתון\n\nהציגו אותם ב path\n\nדוגמת הרצה:\n\nhttp://localhost:8000/students\n\ntal \n\ngal\n\nYossi\n\nתרגיל בית (המשך):\n\n\n\nלהוסיף path שמציג את התלמידים בקורס שמופיע ב url:\n\nדוגמת הרצה:\n\nhttp://localhost:8000/students/python\n\nרק תלמידים בקורס פייתון\n\n\n\nhttp://localhost:8000/students/javascript\n\nרק תלמידים בקורס  JS \n\n\n\nלהוסיף path שמציג את שם תלמיד לפי ה id שלו:\n\nדוגמת הרצה:\n\nhttp://localhost:8000/students/1\n\nמציג את שם התלמיד עם  id 1\n\n\n\nלהוסיף path  שמציג שם קורס עבור תלמיד מסויים:\n\n\n\nhttp://localhost:8000/course/student/1\n\nמציג את שם הקורס של תלמיד עם  id=1\n\n\n\nhttp://localhost:8000/course/student/student1\n\nמציג את שם הקורס של תלמיד עם שם student1\n\n\n\n\n\n\tתרגיל:\n\n\n\nלהעתיק את הtemplate של detail.html ולגרום לו לעבוד – כשלוחצים על שאלה רואים את השאלה וכל התשובות האפשריות.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nשלבים לפתרון:\n\nלהבין מה רוצים מאיתנו. במקרה הזה לוקחים Question ועוברים על כל ה Choices בתוך ה choice_set  שלו.\n\nלהחזיר Question לתוך ה template\n\n/polls/1 יחזיר את שאלה עם id=1 ל Template, וה template יודע לעשות לולאה על כל ה choices\n\nלחבר את /polls/1 עם view – מחובר ע\"י detail שזאת פונקציה בתוך views\n\nלכתוב את detail כך שתעשה render עם השאלה עם id=1 ל detail.html\n\nלהעביר ל detail.html משתנה שנקרא question שבתוכו יש אובייקט מסוג Question\n\n\n\nתרגילים:\n\nבאפליקציית students, הוסיפו דף בית עם template שמציג את כל התלמידים\n\nכנ\"ל את כל הקורסים ב Template\n\nהוסיפו endpoint שמוסיף תלמיד בצורה הבאה:\n\n/students/add/tal\n\nומחזיר template עם ההודעה הבאה:\n\nThe student tal was added successfully with id 2\n\n\n\nצרו אפליקציה חדשה בשם cars בפרוייקט חדש cars_project. \n\nצרו Model בשם Car עם תכונות שם, צבע ומחיר\n\nצרו endpoint שמוסיף רכב חדש עם תכונות רנדומליות (למשל שם car1, צבע אדום מתוך 5 צבעים ומחיר 120000(\n\nצרו endpoint שמחזיר את רשימת שמות כל הרכבים עם template\n\nכנ\"ל רק מחזיר את כל התכונות של הרכב לא רק את השם בצורה של טבלה עם template\n\nבונוס: להוסיף גם קישור לתמונה ולהציג אותה\n\nבונוס: לשנות את צבע הרקע של ה div שבתוכו נתוני הרכב לצבע הרכב (עדיף עם cards)"}, {"filename": "flask-summary-images-3.docx", "content": "מתחילים FLASK\n\n\n\nמה עשינו עד עכשיו בפרוייקט?\n\n\n\nאפליקציית Desktop\n\n\n\nאפליקציית Client Server\n\n\n\n\n\n\n\n\n\n\n\nFLASK\n\nהתקנה והגדרות\n\nRoute, URL\t\n\nנתיב פשוט: /discount/coupon/123456\n\nהעברת נתונים עם args:\n\n\n\n/discount?coupon=123456&dis=10\n\nהעברת נתונים בתוך הנתיב:\n\n/discount/coupon/123456\n\n/discount/<coupon>\n\n Jinja templates\n\nForms\n\n\n\n\n\nJinja Templates\n\n\n\nליצור template עם שם וטלפון, כל אחד ב div משלו\n\nלהוסיף גם מייל contacts.html, כל אחד ב div משלו\n\nצרו מחלקה contact עם תכונות  שם, מייל, טלפון וכתובת והציגו אותה ב template\n\nכנ\"ל רק עם מילון עם התכונות הנ\"ל\n\n\n\ncontact={\"name\":\"tal\", \"address\":\"haifa\"}\n\nלעשות רשימה של contacts (אובייקטים או מילונים) ולהציג ב template \n\nכל איש קשר ב div  משלו\n\nלעצב עם CSS\n\nכנ\"ל רק רשימה של Tasks כמו בפרוייקט 1 \n\nלקחת את הקובץ pickle מפרוייקט 1 ולהציג את הנתונים (המשימות) שיש שם\n\nב Template\n\n\n\nשליחת נתונים לשרת\n\n\n\nיש כמה דרכים:\n\n\n\nעל ה URL\n\n\n\nhttp://127.0.0.1:5000/contacts?name=tal&phone=054-222222\n\n\n\nhttp://127.0.0.1:5000/coupon?code=123456\n\n\n\nעל ה URL בתוך הנתיב עצמו:\n\n\n\nhttp://127.0.0.1:5000/code/123456\n\n\n\n\n\nתרגיל:\n\nיש 3 קופונים, עם הנחות של 10, 15, 20 אחוז. כתבו route שמציג את ההנחה המתאימה לפי הקופון, או הודעה שהקופון לא נכון.\n\n\n\nhttp://127.0.0.1:5000/code/122\n\n\n\n\n\n\n\n\n\n\n\nתרגיל:\n\nלהוסיף תמונה לפרופיל, השם של התמונה אותו דבר כמו שם המשתמש, למשל:\n\nhttp://127.0.0.1:5000/profile/tal\n\ntal.jpg\n\nלהוסיף עוד משתמש כך שיעבוד:\n\n\n\nhttp://127.0.0.1:5000/profile/shani\n\n\n\n\n\n\n\nתרגיל:\n\nRoute שמקבל שני מספרים ומחזיר את הסכום\n\nRoute שמקבל שם ומחזיר טלפון (לפי מילון על השרת)\n\n{\"tal\":\"54354353\"}\n\nמשחק ניחושים: route  שמקבל מספר בין 1 ל 10 ובודק אם הוא שווה למספר בין 1 ל 10 שנבחר רנדומלית. אם גדול מהמספר מחזיר too large, אחרת too small\n\n\n\nמושגים:\n\nאתר סטטי: הכל מוגדר מראש, כל התוכן כבר כתוב. לא מגיב לקלט.\n\nאפליקציית ווב (מערכת ווב): אינטראקטיבית, כלומר מגיבה לקלט. לא הכל מוכן מראש, התוכן נוצר במיוחד לפי הקלט.\n\nאפליקציות מובייל: כמו אפליקציות ווב מבחינת ה backend. ההבדל הוא ב front, כלומר בחלק שהמשתמש רואה שרץ על הטלפון במקום על המחשב.\n\n\n\nסוגי אפליקציות מובייל:\n\nNative\n\nכתובה בשפה שהמכשיר מדבר \n\nIOS: Objective C, Swift\n\nAndroid: Java, Kotlin\n\nHybrid\n\nבעצם האפליקציה היא דפדפן קטן\n\n\n\n\n\nתרגיל forms:\n\n\n\nלהוסיף מה שצריך כדי לקבל גם hello עם השם וגם תאריך של היום\n\nלהוסיף בדיקה אם השם שווה לשם שלכם, להחזיר hello, אחרת להחזיר unauthorized\n\nלהוסיף עוד input לשם משפחה ולהחזיר hello עם השם ושם משפחה\n\nלעשות form שמקבל מחיר ומחזיר מחיר + מעמ\n\nלעשות form עם שני inputs כך שאם מכניסים שני מספרים מקבלים חזרה את הסכום\n\nלעשות form שמקבל קופון ואם הקופון נכון מחזיר שקיבלת הנחה 10%\n\nכנ\"ל רק להוסיף input עבור מחיר ואם הקופון נכון להחזיר את המחיר פחות 10%\n\n\n\nתרגיל templates:\n\n\n\nלסיים את כל ה routes עם ה templates המתאימים עם template inheritance כלומר blocks כמו בדוגמא ב add.html"}, {"filename": "html-api-solution-images.docx", "content": "פתרון לתרגיל HTML עם API\n\n\n\nהתרגיל: עליכם לכתוב תוכנית שמציגה בדפדפן לוח טיסות המראות ונחיתות מעודכן. הנתונים יעודכנו דרך API:\n\nhttps://data.gov.il/api/3/action/datastore_search?resource_id=e83f763b-b7d7-479e-b172-ae981ddc6de5&limit=15\n\n.\n\nשלב א’ בפתרון: לחזור על מה שלמדנו בכל אחד מהתחומים בפייתון, SQL ו HTML:\n\nתחום פייתון: \n\nלמדנו איך לפתח class שמתאים לטבלה של נתונים. \n\nמכיוון שמדובר בטיסות, ה class המתאים הוא טיסה, Flight.\n\nלמדנו איך לאתחל את ה class עם תכונות (properties) שמתאימות לשדות של הטבלה שמעניינות אותנו: חברה, תאריך חברה, יעד וכו’.\n\nלמדנו איך ליצור אובייקט מתוך ה class. באובייקט הזה נאחסן נתונים של טיסה אחת. אם רוצים לבצע פעולות כגון שמירה של האובייקט כשורה בטבלה html, הגיוני להוסיף ל class מתודה (פונקציה) שעושה זאת, כך שנוכל להפעיל את הפונקציה על האובייקט בלולאת for.\n\nלמדנו איך מייבאים את ספריית sqlite3 ואיך ניגשים ל database ומריצים עליו שאילתות ב SQL.\n\nלמדנו ליצור HTML ולשמור אותו בקובץ.\n\nתחום SQL \n\nלמדנו איך יוצרים טבלה עם CREATE\n\nלמדנו איך שומרים שורה בטבלה עם INSERT\n\nלמדנו בשיעורים קודמים איך שולפים שורות מהטבלה עם SELECT\n\nתחום HTML \n\nלמדנו ליצור טבלת HTML ולמלא אותה בנתונים.\n\nלמדנו בשיעורים קודמים איך להוסיף עיצוב עם CSS. \n\nשלב ב’ בפתרון:\n\nמשימה 1: יש להוריד את לוח הטיסות דרך API כל 15 דקות\n\nפה בעצם אין שום דבר חדש, רק שילוב של דברים שלמדנו:\n\nשימוש ב urllib\n\nשימוש ב json\n\nצריך לכתוב פונקציה שמורידה את ה JSON מה API ומחזירה אותו כמילון.\n\n\n\nמשימה 2: לשמור את הטיסות ב database עם SQL\n\nפה צריך לחזור לחלק של ה SQL שסיכמנו בהכנה (ראו למעלה חלק א’ של הפתרון). \n\nקודם כל צריך ליצור טבלת טיסות עם הנתונים המתאימים:\n\n\n\n\nאחרי שיצרנו את הטבלה, אנחנו צריכים לשמור שם את הטיסות. למדנו איך שומרים שורה אחת עם INSERT. \n\nמכיוון שצריך לשמור הרבה שורות, הגיוני לעשות זאת בלולאת for. \n\nאיך נהפוך את רשימת הטיסות שקיבלנו מה API לשורות ב SQL?\n\nברשימה יש מילונים, כשכל מילון ברשימה הוא בעצם טיסה. כלומר, כל מילון ברשימה שקיבלנו מהפונקציה update_flights הוא שורה בטבלה.\n\nצריך לחלץ מהמילון הנ\"ל את נתוני הטיסה עצמם שמעניינים אותנו, כלומר חברה, תאריך, עיר, ארץ וסטטוס. \n\nאם נסתכל במילון של טיסה אחת נגלה שהמפתחות המתאימים הם:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nאלה הם הנתונים בטבלה. צריך רק להכניס אותם לשאילתת SQL INSERT מתאימה:\n\n\n\n\n\nואז לבצע את ה INSERT על כל הרשימה בלולאת for:\n\n\n\n\n\nנשים לב שהשאילתה היא מסורבלת, ארוכה וקשה לקריאה. \n\nהיינו רוצים להתייחס למשתנים בצורה יותר טובה, למשל flight.company. נעשה זאת בעזרת class:\n\n\n\n\t\n\nה class מאפשר לנו ליצור אובייקט מסוג Flight, ולאתחל אותו עם הערכים של כל טיסה ברשימה. הטיסה היא מילון, כיצד ניצור אובייקט Flight ממילון?\n\nאפשרות 1: נכניס את הערכים ידנית, כלומר:\n\n\n\n\t\n\nזה עדיין מסורבל, למרות שהשאילתה נראית יותר קריאה. \n\nאיך אפשר לשפר את הקוד כך שנוכל לאתחל את האובייקט וליצור את השאילתה בקלות?\n\n\n\nנזכור שמילון הוא בעצם keys ו values, ואפשר לקבל בקלות את ה values. בשביל השאילתה אנחנו צריכים string שנראה כך:\n\n\n\nנשים לב שזהו בדיוק מבנה של tuple. כלומר אם ניקח את ה values של המילון ונמיר אותם ל tuple, ואז נמיר את ה tuple ל string, נקבל את מה שרצינו:\n\n\t\n\nהבעיה כאן היא שנקבל את כל השדות של הטבלה מה API, כולל ערכים שלא רצינו. נסו זאת:\n\n\n\n\t\n\nכדי לסנן את הערכים נשתמש ב class שיצרנו, Flight. מכיוון שה class מאותחל רק עם הערכים שרצינו, אפשר לאתחל אותו ישירות עם המילון (ערכי הטיסה):\n\n\t\n\nואז לקחת את \"מילון הקסם\" של האובייקט flight, שאוטומטית נותן את התכונות שאנחנו רוצים מתוך האובייקט:\n\n\n\nועכשיו קיבלנו את השאילתה שרצינו באופן אוטומטי:\n\n\n\nבמידה וזה מבלבל, או שרוצים לשלוט ידנית בתכונות שמכניסים, אפשר להשתמש ב SQL של האפשרות הראשונה, עכשיו שאנחנו יודעים לאתחל את האובייקט באופן אוטומטי:\n\nהחסרון המאד משמעותי בנוסח זה הוא שנצטרך לעדכן ידנית את השאילתה בכל פעם שה class משתנה. \n\n\n\nמשימה 3: להציג את הטיסות ב HTML\n\nיש שתי אפשרויות: לקחת את הטיסות ישירות מה API ולהציג אותן, או לקחת אותן מה database. נכתוב פונקציה שלוקחת ישירות מה API ובשיעורים הבאים נראה איך לוקחים מה database.\n\nיש לנו כבר רשימת טיסות שמקבלים מהפונקציה update_flights. בעצם צריך לעבור על כל טיסה ברשימה ולכתוב אותה לתוך שורה בטבלת HTML. \n\nהגיוני לעשות זאת בלולאת for. כל איטרציה בלולאה תבנה שורת HTML חדשה כלומר:\n\n\n\n\n\nאפשר לעשות זאת ידנית כפי שעשינו ב SQL:\n\n\n\nבעצם, זאת בעיה מאד דומה ליצירת שורה בטבלה עם SQL, רק עם HTML! ננסה להשתמש באותו פתרון:\n\n\n\n\n\n\n\n\n\nהפתרון הזה עובד ונותן את אותם יתרונות כמו ב SQL.\n\nעכשיו כשיש לנו את ה HTML צריך לשמור אותו בקובץ, ולעדכן כל רבע שעה. \n\nנשתמש בלולאת while ונקרא לפונקציה time.sleep כדי לחכות 15 דקות לפני העדכון הבא:\n\n\n\n\n\nכך נראה דף הווב שלנו עד כה:\n\nחסרה שורת הכותרת, וקצת עיצוב. \n\nאת שורת הכותרת אפשר להוסיף ידנית:\n\n\n\nאו באופן אוטומטי ע\"י ה keys של האובייקט flight עם הטריק הבא list comprehension:\n\n\n\n\t\n\nשימו לב שהשתמשנו ב ()Flight, כלומר אובייקט המאותחל בלי פרמטרים. כדי שנוכל לקבל אובייקט ()Flight כזה שינינו את ה __init__ של Flight והשתמשנו ב get של מילון:\n\n\n\n\t\n\n\n\nהקוד הנ\"ל נותן לנו את שורת הכותרת:\n\n\n\n\n\nנוסיף עיצוב ואת שעת העדכון:\n\n\n\n\t\n\n\n\n\t\n\nכדי להבין כמה חשוב לעבוד עם OOP נראה מה קורה עם רוצים להוסיף עוד עמודה לטבלה, למשל את שם העיר באנגלית.\n\nכדי להכניס את השינוי הזה צריך:\n\nלעדכן את טבלת ה SQL עם העמודה החדשה\n\nלעדכן את שאילתת ה  SQL INSERT\n\nלעדכן את טבלת ה HTML\n\n\n\n נוסיף עוד שדה אחד ל class:\n\n\n\n\n\n\n\n\n\nהשינוי האחד הזה מספיק כדי להוסיף את העמודה החדשה לטבלת ה HTML, וגם להוסיף את העמודה החדשה לשאילתת ה SQL INSERT:\n\n\n\n\n\n\n\nנשאר רק להוסיף את העמודה לטבלה עצמה, זהו קוד שמריצים פעם אחת (בדרך כלל במודול חיצוני) ע\"י ה SQL הבא:\n\n\n\n\n\n\n\nבונוס: אפשר כמובן ליישם לוגיקה שתזהה אם ה class השתנה ותוסיף את העמודה ב SQL אוטומטית,למשל ע”י השוואה בין מספר העמודות בטבלה לבין מספר התכונות במחלקה:\n\n\n\n\n\n\n\nאפשר גם להכניס את יצירת שורת ה HTML ל class עצמו (כאן הוספנו גם את ה id של טבלת ה HTML שיעזור לנו בשלב ה javascript):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nמשימה 4: refresh דרך javascript\n\nבשלב הזה אנחנו עובדים עם הדפדפן בלבד, כלומר יש לנו את הדף HTML מוכן וטעון בדפדפן, ומתוכו טוענים את קובץ ה js:\n\nכל הקוד javascript שנכתוב ב flights.js ירוץ כשטוענים את הדף HTML.\n\nשימו לב שקיבלנו רמז: להשתמש בפונקציה location.reload. נחפש בגוגל את הפונקציה הזאת:\n\n\n\n\n\n\n\n\n\n\n\n\n\nזהו התחביר של הפונקציה. אבל, עדיין צריך להריץ אותה כל פרק זמן מסויים. נחפש בגוגל \"js time interval”:\n\n \n\n\t\n\nכלומר, setInterval מקבלת כפרמטר את הפונקציה שיש להריץ, ואת הזמן שיש לחכות באלפיות שניה. אם כך הקוד שלנו צריך להיות:\n\n\n\n  \t\n\n\n\nכדי להוסיף את השעה בה בוצע הריפרש, צריך להשתמש ב-()Date:\n\n\n\n\n\n\n\nאיך נכניס את התאריך לתוך ה HTML? נוסיף רכיב HTML חדש דרך javascript, ונכתוב לתוכו את התאריך. כל פעם שהדף יתרפרש, התאריך יתעדכן.\n\nנשתמש בפונקציה document.createTextNode שיוצרת אלמנט חדש מסוג טקסט עם התאריך והשעה הנוכחיים:\n\n כדי להוסיף את האלמנט החדש date שיצרנו ל body, נשתמש בקוד הבא:\n\n\n\n\n\nמכיוון שלא נתנו id ל body, אנחנו מקבלים אותו דרך getElementsByTagName שנותן לנו מערך של כל ה tags מהסוג body. מכיוון שיש רק אחד, ניקח את האינדקס 0 ונוסיף לו את האלמנט date עם appendChild.\n\nלסיכום, הקובץ flights.js שלנו:\n\nוהדף ווב עם התאריך:\n\n\n\nמשימה 5: שנו אוטומטית את הצבע של שורה עם טיסה מבוטלת לאדום (או צבע אחר)\n\nמהו האלגוריתם:\n\n1. לעבור על כל רשימת הטיסות אחת אחת, כלומר על השורות בטבלה\n\n2. בכל מעבר, לבדוק עם הטיסה מבוטלת לפי התא המתאים בשורה (status)\n\n3. אם הטיסה מבוטלת, לשנות את צבע הרקע של השורה\n\nזה נראה כמו משימה שמתאימה ללולאת for. אכן יש ב javascript לולאותfor דומות לפייתון, עם תחביר קצת שונה.\n\nאיך נשיג את רשימת השורות בטבלה? נשתמש בתכונה rows של table ב javascript. כדי להקל על עצמנו, נוסיף id לטבלה:\n\nהקוד שנוסיף ל flights.js:\n\n\n\n\t\n\nהסבר:\n\nשורה 6: שמים את האובייקט table במשתנה.\n\nשורה 9: לולאת for ב JS, שימו לב לסוגריים.\n\nשורה 10: דילוג על שורת הכותרת בעזרת אינדקס 0 של מערך השורות rows\n\nשורה 13: שימוש ב namedItem של אובייקט cells. זהו בעצם מילון עם המפתחות שמות התאים. שימוש ב innerText על אלמנט כמו תא בטבלה יתן לנו את התוכן הפנימי שלו, כלומר את ה string שאנחנו מחפשים. \n\nשורה 14: שינוי הצבע של כל השורה r עם bgColor.\n\nמשימה 6: הוסיפו חיפוש (נניח לפי שם חברה) בטבלה דרך JS.\n\n \n\nאת ה HTML של תיבת החיפוש יש להוסיף רק ב JS (document.createElement)\n\nכדי לעשות include לקובץ javascript מתוך HTML:\n\n<script src='flights.js'></script>"}, {"filename": "oop-summary.docx", "content": "OOP\n\n\n\nObject Oriented Programming\n\n\n\nClass  מחלקה\n\nמבנה נתונים, מתאר, סוג, תבנית לייצור אובייקטים\n\nמבני נתונים טובים תומכים במימוש אלגוריתמים טובים\n\nמחלקה נותנת לנו אמצעי לשמור נתונים ולפעול עליהם\n\nלוקחים משתנים, פונקציות, רשימות ומקבצים אותם לקבוצות לפי הסוג והתכונות\n\nלדוגמא:\n\nמשתנה student\n\nלהוסיף student\n\n\n\nObject\n\nInstance של class\n\nמופע ספציפי של המחלקה\n\nנתונים ספציפיים, פונקציות ספציפיות שהאובייקט מפעיל\n\n\n\n Property תכונה\n\nמשתנה השייך למחלקה (התכונות)\n\nשני סוגים: class variable, instance variable\n\n\n\nMethod\n\nפונקציה בתוך מחלקה שהאובייקט יכול להפעיל\n\n\n\nInit constructor\n\nבונה את האובייקט ומאתחל את המשתנים או ה state של האובייקט\n\n\n\nMagic (dunder) method\n\n__str__\n\nבונוס: כמה magic methods קיימים, ומה הם עושים\n\nירושה inheritance\n\nיחס של \"סוג של\" type of\n\ncomposition\n\nיחס של \"יש לו\" has a\n\nתכנון: לזהות את האובייקטים!\n\nמימוש: לכתוב את המחלקות המתאימות, \n\nהלוגיקה – כמה שיותר ע\"י מתודות של האובייקטים. כמה שפחות משתנים ופונקציות לא קשורות לאובייקט.\n\n\n\nבלקג'ק\n\nמהם האובייקטים? קלף, חפיסת קלפים (בנוייה מקלפים), שחקן, דילר\n\nמהלך המשחק:\n\nחפיסת קלפים\n\nערבוב חפיסה\n\nחלוקת קלפים\n\nחשיפת קלפים (ידיים)\n\nהשחקן משחק (מחליט אם hit או stand)\n\nהדילר משחק\n\nבהתאם להחלטת השחקן עושים הערכה"}, {"filename": "summary-forms-templates.docx", "content": "ממשיכים full stack\n\n\n\nFORMS\n\n\n\nהמטרה: לקבל קלט מהמשתמש ולהחזיר פלט.\n\n\n\nForm הדרך הכי פשוטה:\n\nHTML\n\nטאג של form\n\n2 attributes:\n\nAction\t\n\nברירת מחדל זה ה URL שממנו קיבלנו את ה form. \n\nזה ה endpoint על השרת שהולך לקבל את ה inputs של ה form כששולחים את ה form כלומר כשעושים submit\n\nMethod\n\nשיטה שבה הדפדפן הולך לשלוח את ה INPUTS  לשרת:\n\nGET\n\nברירת מחדל אם לא מגדירים action\n\nכשלוחצים על submit, הדפדפן אוטומטית שולח את הinputs  כזוגות של name ו value על ה URL ב query string:\n\nhttp://tal.com/register?username=something&email=tal@tal.com\n\nPOST\n\nכשלוחצים על submit, הדפדפן אוטומטית שולח בקשה ל URL לפי ה action אבל שם את ה inputs בתוך הבקשה, כלומר\n\nusername=something&email=tal@tal.com\n\nלא יהיה חשוף למשתמש.\n\n\t\tבתוך ה form צריך תגיות inputs ב HTML, לכל input  חייב להיות \tattribute בשם name, ואז הוא יישלח עם ה form.\t\n\n\t\tוגם תגית input type=\"submit\" כדי לשלוח את ה form.\n\n\n\nFLASK\n\nEndpoint  אחד או שניים (אחד לקבל והשני לשלוח):\n\nEndpoint שיחזיר את את ה form, תמיד יהיה ב GET.\n\nבפונקציה של ה route מחלצים את ה inputs לפי ה method:\n\nGET:\n\nRequest.args\n\nסוג של מילון, כלומר כדי לחלץ את ה username מהדוגמא הנ\"ל, עושים request.args[\"username\"]\n\n\n\nPOST:\n\nRequest.form\n\nסוג של מילון, כלומר כדי לחלץ את ה username מהדוגמא הנ\"ל, עושים request.form[\"username\"]\n\n\n\nתרגיל:\n\nנכתוב form שמחזיר את ה method שלו.\n\n\n\nתרגיל:\n\nלאחד את /login ו /login_form לאותו endpoint. אותה פונקציה תטפל גם ב\n\nGET  וגם ב POST\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTemplates\n\n\n\nהמטרה: \n\nלהפריד את ה HTML מהפייתון, לכתוב HTML כמו front.\n\nלשלב HTML עם לוגיקה בפייתון (דרך jinja)."}]